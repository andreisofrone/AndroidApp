{"Name":"Syncfusion Essential Studio","Id":2440,"Alias":"SyncfusionEssentialStudio","Description":"**Overview**\r\n\r\nEssential Studio for Xamarin contains all the necessary user interface components like datagrids, charts and gauges that are needed to build typical line of business mobile applications. User interface elements like the charts and gauges can be configured in a common view using C# or XAML and it gets rendered as native controls on the respective platforms without any additional work.\r\n\r\nThis suite also includes a powerful set of components for manipulating Microsoft Excel, Microsoft Word and Adobe PDF file formats. All the file format components have a feature rich API that exposes most of the functionality that the underlying file format itself has to offer.\r\n\r\nHere is the complete list of all the components that ship with Essential Studio for Xamarin\r\n\r\n**Grid**\r\n\r\n  [__DataGrid__](#DataGrid)\r\n\r\n**Data Visualization**\r\n\r\n  [__Chart__](#Chart)\r\n  \r\n  [__Schedule__](#Schedule)\r\n\r\n  [__CircularGauge__](#CircularGauge)\r\n  \r\n  [__DigitalGauge__](#DigitalGauge)\r\n  \r\n  [__LinearGauge__](#LinearGauge)\r\n\r\n  [__TreeMap__](#TreeMap)\r\n  \r\n  [__Maps__](#Maps)\r\n  \r\n  [__Barcode__](#Barcode)\r\n\r\n**File Format**\r\n\r\n  [__XlsIO__](#XlsIO)\r\n\r\n  [__DocIO__](#DocIO)\r\n\r\n  [__PDF__](#PDF)\r\n\r\n**Editors**\r\n\r\n  [__RangeSlider__](#RangeSlider)\r\n  \r\n  [__AutoComplete__](#AutoComplete)\r\n  \r\n  [__NumericTextBox__](#NumericTextBox)\r\n  \r\n  [__Calendar__](#Calendar)\r\n\r\n**Notifications**\r\n\r\n  [__BusyIndicator__](#BusyIndicator)\r\n\r\n#\u003ca id=\"DataGrid\"\u003e\u003c/a\u003eDataGrid\r\n\r\nThe Essential DataGrid for Xamarin is a high performance grid component that has been built to achieve the best possible performance on the Xamarin platform. It offers smooth and responsive touch, scrolling up to hundreds of thousands of records. The Essential DataGrid includes several advanced features like grouping, sorting, filtering, etc. as follows:\r\n\r\n**Data Sources**\r\n\r\nThe Essential DataGrid works out of the box for all the popular DataSources. The DataGrid can automatically generate columns for the properties in the data model.\r\n\r\n\r\n\r\n**Sorting**\r\n\r\nThe DataGrid allows the end users to sort data against any column by touching the Header or by adding SortColumnDescription in code. Sorting in each column iterates through three sort states; ascending, descending, and unsorted. Custom sorting logic is also supported.\r\n\r\nThe DataGrid supports Multicolumn sorting. It can be initiated by setting the AllowMultiSort property and clicking on multiple column headers against which the data is to be sorted.\r\n\r\n\r\n\r\n\r\n**Grouping**\r\n\r\nThe DataGrid offers grouping by adding GroupColumnDescription in code. The DataGrid can calculate and display summary information in the caption for each group. Custom grouping logic is also supported.\r\n\r\n\r\n\r\n\r\n**Filtering**\r\n\r\nThe Datagrid can easily be filtered by setting Predicate to the View.\r\n\r\n\r\n\r\n**Selection**\r\n\r\nThe DataGrid provides explicit support for row-based selection upon touching the rows. The row selection has Single, Multiple, SingleDeselect and None modes. The SingleDeselect mode lets you deselect the selected row upon touching it again.\r\n\r\n\r\n\r\n**Template Column**\r\n\r\nThe DataGrid provides support for Template column using which any controls can be hosted inside the GridCell.\r\n\r\n\r\n\r\n\r\n**SwipeButtons**\r\n\r\nThe DataGrid control supports swiping of rows. Swipe buttons are displayed when a user swipes from left to right or from right to left over a data row. Create swipe templates and associate the views in it with custom actions.\r\n\r\n\r\n\r\n**LoadMore**\r\n\r\nThe DataGrid control provides support for loading a subset of data to its data source in the runtime using LoadMore view. It also allows you to customize the LoadMore view and their positions to either top or bottom based on the requirements.\r\n\r\n\r\n\r\n**PullToRefresh**\r\n\r\nThe DataGrid control provides support for refreshing the data source in the runtime when performing the pull to refresh action. It also allows you to customize the PullToRefresh view based on the application requirements.\r\n\r\n\r\n\r\n**Paging**\r\n\r\nThe Datagrid control provides built-in options to page the data on demand when dealing with large volumes of data.\r\n\r\n\r\n\r\n**Conditional Styles**\r\n\r\nThe DataGrid provides extensibility to customize the CellStyle using which styles can be applied for a column based on conditions.\r\n\r\n\r\n\r\n**Styles**\r\n\r\nThe Datagrid control provides support for styles. It also allows you to customize the styles to display the data visually appealing based on the application requirements. This greatly enhances the appearance of the grid and provides better user experience.\r\n\r\n\r\n\r\n**Exporting**\r\n\r\nThe DataGrid control provides support for exporting the data to Excel and Pdf with several customization options like custom appearance, excluding specific columns, excluding headers, setting custom row height, setting custom column width, etc.\r\n\r\n\r\n\r\n**Freeze Panes**\r\n\r\nThe DataGrid has added support to freeze rows in the View.\r\n\r\n\r\n\r\n**RowHeight Customization**\r\n\r\nThe DataGrid control provides support to change the height of the row based on the content of any column or certain columns to enhance the readability of the content.\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Chart\"\u003e\u003c/a\u003eChart\r\n\r\nEssential Chart for Xamarin.Forms is a visually stunning charting component that is also easy to use. It includes all the common chart types ranging from line charts to financial charts.\r\n\r\n**Chart Types**\r\n\r\n22 chart types can be plotted including Line, Fast Line, Spline, Column, Range Column, Scatter, Area, Spline Area, Bar, Pie, Doughnut, Pyramid, Funnel, Bubble, Candle, OHLC, Stacking Column, Stacking Bar, Stacking Area, Stacking Column 100, Stacking Bar 100 and Stacking Area 100..\r\n\r\n**Column Series**\r\n\r\n\r\n\r\n**Line Series**\r\n\r\n\r\n\r\n**Spline Series**\r\n\r\n\r\n\r\n**Step Line Series**\r\n\r\n\r\n\r\n**Spline Area Series**\r\n\r\n\r\n\r\n**Area Series**\r\n\r\n\r\n\r\n**Scatter Series**\r\n\r\n\r\n\r\n**Range Column Series**\r\n\r\n\r\n\r\n**Bar Series**\r\n\r\n\r\n\r\n**Pie Series**\r\n\r\n\r\n\r\n**Doughnut Series**\r\n\r\n\r\n\r\n**Pyramid Series**\r\n\r\n\r\n\r\n**Funnel Series**\r\n\r\n\r\n\r\n**Bubble Series**\r\n\r\n\r\n\r\n**Stacking Area Series**\r\n\r\n\r\n\r\n**Stacking Area 100 Series**\r\n\r\n\r\n\r\n**Stacking Bar Series**\r\n\r\n\r\n\r\n**Stacking Bar 100 Series**\r\n\r\n\r\n\r\n**Stacking Column Series**\r\n\r\n\r\n\r\n**Stacking Column 100 Series**\r\n\r\n\r\n\r\n**Candle Series**\r\n\r\n\r\n\r\n**OHLC Series**\r\n\r\n\r\n\r\n**Axis**\r\n\r\nEssential Chart has several specialized axis types including NumericalAxis, CategoryAxis and DateTimeAxis. Several aspects of the axis like position, labels appearance, gridlines and ticks can be customized.\r\n\r\n**Numeric Axis**\r\n\r\n\r\n\r\n**Category Axis**\r\n\r\n\r\n\r\n**Date Time Axis**\r\n\r\n\r\n\r\n**Logarithmic Axis**\r\n\r\n\r\n\r\n**Zooming and Panning**\r\n\r\nChart provides you an option to zoom and pan. Using this feature you can clearly view the large amount of data points.\r\n\r\n\r\n\r\n\r\n\r\n**Data Point Selection**\r\n\r\nChart allows you to select a data point in the series.\r\n\r\n\r\n\r\n**ExplodeOnTouch**\r\n\r\nChart allows you to highlight the selected segment by exploding it.\r\n\r\n\r\n\r\n**Tooltip**\r\n\r\nTooltip is used to display any information over a chart series. \r\n\r\n\r\n\r\n**Trackball**\r\n\r\nTrackball feature used to see the data point near the finger.\r\n\r\n\r\n\r\n**Strip Line**\r\n\r\nThe Chart control supports strip lines to classify different regions in the chart area using colors and text annotations.\r\n\r\n\r\n\r\n**Vertical Chart**\r\n\r\nChart allows you to change the orientation of the series, which provides different perception on the data.\r\n\r\n\r\n\r\n**Data Marker Label**\r\n\r\nThis feature allows you to rotate the label and also to position the data marker labels at auto, inner, outer and center position of actual data point position.\r\n\r\n\r\n\r\n**Auto Scrolling**\r\n\r\nChart will automatically scroll to display a fixed range of data points. You can also pan to view previous data points.\r\n\r\n**Custom Object**\r\n\r\nYou can set any custom objects as an ItemsSource for Chart.\r\n\r\n**Export the Chart as an Image**\r\n\r\nYou can save the chart as an image in picture gallery.\r\n\r\n**Flexible label positioning**\r\n\r\nThe position of axis labels can be fully customized to provide better readability and to avoid any potential overlap.\r\n\r\n\r\n\r\n**Automatic range calculation with range padding**\r\n\r\nOptimal ranges are automatically calculated based on the given data; the calculated ranges can also be customized using range padding.\r\n\r\n**Range Padding – None**\r\n\r\n\r\n\r\n**Range Padding - Round**\r\n\r\n\r\n\r\n**Range Padding - Additional**\r\n\r\n\r\n\r\n**Multiple Axes**\r\n\r\nData can be plotted against multiple scales in a single chart.\r\n\r\n\r\n\r\n**Interactive Legends**\r\n\r\nLegends can be positioned anywhere within the chart area. It is also possible to toggle the visibility of specific series by tapping on the legend items. This functionality is very useful when the user needs to focus on the data in specific series only.\r\n\r\n\r\n\r\n**High Performance**\r\n\r\nEssential Chart has been built from the ground up to handle large volumes of data. It can easily render thousands of data points within a second.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Schedule\"\u003e\u003c/a\u003eSchedule\r\n\r\nThe Schedule control for Xamarin.Forms lets you to manage appointments with intuitive user interface similar to native calendar. Its rich feature set includes functionalities like data binding, Navigation, Date Restrictions.\r\n\r\n\r\n\r\n**Views**\r\n\r\nIt has four types of built-in views to display the appointments based on requirement.\r\n\r\n \r\n \r\n \r\n \r\n\r\n**Flexible Data Binding**\r\n\r\nAbility to bind the custom appointments by mapping its properties instead of converting into schedule defined appointment type.\r\n\r\n**Date Navigation**\r\n\r\nHas ability to block and disable the interaction with specific time slots.\r\n\r\n**Recurrence Appointments**\r\n\r\nIt has support to create, view and edit recurrence appointments.\r\n\r\n \r\n\r\n**Block Time Slot**\r\n\r\nHas ability to block the interaction with specific time slots.\r\n\r\n \r\n\r\n**Navigation**\r\n\r\nHas ability to prevent date navigation with minimum and maximum value.\r\n\r\n**Localization**\r\n\r\nEvery static text of schedule can be localized to desired language.\r\n\r\n \r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"CircularGauge\"\u003e\u003c/a\u003eCircularGauge\r\n\r\nThe CircularGauge control for Xamarin.Forms lets you visualize numeric values over a circular scale. The appearance of the gauge can be fully customized to seamlessly integrate with your applications.\r\n\r\n**Range Indicators**\r\n\r\nRange indicators help quickly visualize the range within which a value falls on a scale. This functionality is very useful when needing to quickly determine if a value has crossed a certain threshold.\r\n\r\n \r\n\r\n**Customizable Frames**\r\n\r\nThe CircularGauge control can be rendered within circular, semi-circular, and quadrant frames so it fits within the available space.\r\n\r\n\r\n\r\n**Needle Pointer**\r\n\r\nThe current value can be indicated by using a fully customizable pointer.\r\n\r\n  \r\n\r\n**Range Pointer**\r\n\r\nThe range pointer can be alternatively used in place of the needle pointer\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"DigitalGauge\"\u003e\u003c/a\u003eDigitalGauge\r\n\r\nThe Digital Gauge control for Android lets you visualize alpha and numeric values over a Digital Gauge frame. Digital gauge is used to display a range of values that uses character in combination with numbers.\r\n\r\n\r\n\r\n**Appearance**\r\n\r\nThe digital gauge supports many customizations such as foreground and background colors.\r\n\r\n\r\n\r\n**Display Type**\r\nThe digital gauge can display numbers as well as alphabetic characters in its output. Special characters support can also be displayed.\r\n\r\n\r\n\r\n**Character Type**\r\nDigital gauge supports 4 types of character types; seven-segment, fourteen-segment, sixteen-segment and eight by eight dot matrix.\r\n\r\n\r\n\r\n**Customizations**\r\nThe segments of a digital gauge can be customized in terms of segment width, segment height, spacing between segments, and color.\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"LinearGauge\"\u003e\u003c/a\u003eLinearGauge\r\n\r\nThe LinearGauge control for Xamarin.Forms lets you visualize numeric values over a rectangular scale. The appearance of the gauge can be fully customized to seamlessly integrate with your applications.\r\n\r\n\r\n\r\n**Orientation**\r\n\r\nLinear gauges can be positioned either in a vertical or horizontal orientation, according to the user\u0027s required scenarios.\r\n\r\n\r\n\r\n**Appearance**\r\nThe appearance of each elements of a linear gauge such as its state indicators, pointers, scale intervals, pointer positions, label positions, tick positions, and much more is easily customizable.\r\n\r\n**Range Indicators**\r\nEssential Gauge supports range indicators which can be used to highlight each specific ranges within a gauge scale with different colors. The user can specify their required start and end values for each range indicators within the gauge. They can also be located at different positions — such as cross (across the scale), inside (below the scale), and outside (above the scale).\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"TreeMap\"\u003e\u003c/a\u003eTreeMap\r\n\r\nThe TreeMap control for Xamarin.Forms provides a simple but effective way to visualize flat or hierarchical data as clustered rectangles with proportions determined by data values.\r\n\r\n**High Performance**\r\n\r\nThe TreeMap control is optimized to visualize large amounts of flat or hierarchical data.\r\n\r\n\r\n\r\n**Grouping**\r\n\r\nData can be grouped to provide a top-level view.\r\n\r\n\r\n\r\n**Rich Interactivity**\r\n\r\nReadability of the data can be greatly enhanced using interactive legends and labels.\r\n\r\n\r\n\r\n**Layout Options**\r\n\r\nVisualize data using one of the available layout algorithms, such as **Squarified** , **SliceAndDiceAuto** , **SliceAndDiceHorizontal** , or **SliceAndDiceVertical** to depict the relative weight of hierarchical data relationships at more than one level.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Maps\"\u003e\u003c/a\u003eMaps\r\n\r\nMaps control helps to visualize statistical data of geographical area on globe as map. \r\n\r\n\r\n\r\n**ESRI Shapefiles** \r\n\r\nRender ESRI Shapefiles to collect geometric location information and associated attributes. The Shapefiles spatially describe a map’s geometries as points, polylines, and polygons. \r\n \r\n         \r\n\r\n **Intuitive Markers** \r\n \r\nProvides customizable markers to showcase your data at specific mark points based on latitude and longitude position.      \r\n\r\n         \r\n\r\n **Visualize Data with Bubbles** \r\n\r\nProvides bubbles to visualize detailed map data represented in variable sizes based on values.\r\n\r\n         \r\n\r\n**Legends** \r\n\r\nProvides legends to showcase valuable information for interpreting the map.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Barcode\"\u003e\u003c/a\u003eBarcode\r\n\r\nEssential Barcode enables rendering of barcodes in Android, iOS and Windows Phone.It Supports both 1D and 2D barcodes\r\n\r\n**Barcode Types**\r\n\r\nBarcode supports Code39, Code39Extended, Code93, Code93Extended, Code11, Code32, Codabar, Code128A, Code128B, Code128C in 1D Barcode and Data Matrix and QR Codes in 2D barcode.\r\n\r\n**Code39**\r\n\r\n\r\n\r\n**Code39Extended**\r\n\r\n\r\n\r\n**Code93**\r\n\r\n\r\n\r\n**Code93Extended**\r\n\r\n\r\n\r\n**Code11**\r\n\r\n\r\n\r\n**Code32**\r\n\r\n\r\n\r\n**Codabar**\r\n\r\n\r\n\r\n**Code128A**\r\n\r\n\r\n\r\n**Code128B**\r\n\r\n\r\n\r\n**Code128C**\r\n\r\n\r\n\r\n**QR_code**\r\n\r\n\r\n\r\n**data_matrix**\r\n\r\n\r\n\r\n**Text_custom**\r\n\r\n\r\n\r\n**Bar_custom**\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"XlsIO\"\u003e\u003c/a\u003eXlsIO\r\n\r\nEssential XlsIO for Xamarin is a .NET PCL library that can be used to create and modify Microsoft Excel documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\n**Supported Features**\r\n\r\n- Charts for data visualization\r\n- Conditional Formatting\r\n- Data Validation\r\n- Tables\r\n- Importing XML data\r\n- Importing Business Objects\r\n- Formulas\r\n- Template Marker\r\n- Auto-Shapes\r\n- Cells Formatting\r\n- Cell Grouping\r\n- Data Filtering\r\n- Data Sorting\r\n- Find Data\r\n- Comments\r\n- HTML Conversion\r\n- Named Ranges\r\n- Number Formats\r\n- Page settings\r\n- Page breaks\r\n- Header and footer images\r\n- R1C1 Reference Mode\r\n- Re-calculation\r\n- R1C1 Formulas\r\n- Dis-contiguous Named Ranges\r\n- Hyperlinks\r\n- Freeze panes\r\n- Sheet Tab color RGB\r\n- Hide rows and columns\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"DocIO\"\u003e\u003c/a\u003eDocIO\r\n\r\nEssential DocIO for Xamarin is a .NET PCL library that can be used to read and write Microsoft Word documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\n**Features**\r\n\r\nHere is a quick summary of the features available in Essential DocIO\r\n\r\n- Create new Word documents.\r\n- Modify existing Microsoft Word documents.\r\n- Format text, tables using built-in and custom styles.\r\n- Insert bullets and numbering.\r\n- Insert, edit, and remove fields, form fields, hyperlinks, endnotes, footnotes, comments, Header footers.\r\n- Insert and extract images, OLE objects.\r\n- Insert line breaks, page breaks, column breaks and section breaks.\r\n- Find and Replace text with its original formatting.\r\n- Insert Bookmarks and navigate corresponding bookmarks to insert, replace, and delete content.\r\n- Advanced Mail Merge support with different data sources.\r\n- Clone multiple documents and merge into a single document.\r\n- Read and write Built-In and Custom Document Properties.\r\n- Define page setup settings and background. \r\n- Create or edit Word 97-2003, 2007, 2010, and 2013 documents\r\n\r\n\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"PDF\"\u003e\u003c/a\u003ePDF\r\n\r\nEssential PDF for Xamarin is a .NET PCL library that can be used to create and modify Adobe PDF documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\nAll of the elements in a typical PDF file like the text, formatting, images and tables are accessible through a comprehensive set of API\u0027s. This makes it possible to easily create richly formatted PDF documents as well as modify existing ones.\r\n\r\n**Features:**\r\n\r\n**Document level features:**\r\n\r\n- Create and load PDF documents files and streams\r\n- Save PDF files to disk and Streams\r\n- Document information\r\n- Document viewer preference\r\n- Document file attachments\r\n- Document level java scripts and actions\r\n- Document outline\r\n- Add and remove Pdf pages\r\n- Import page form existing document\r\n- Document merging \r\n- Booklet\r\n- Stamp\r\n- Page orientation\r\n- Page sizes\r\n- Headers and Footers\r\n- Actions\r\n\r\n**Text**\r\n\r\n- Drawing Text\r\n- Text formatting\r\n- Pagination\r\n\r\n**Graphics**\r\n\r\n- Pen and brush for stroking operations\r\n- Graphics primitives: lines, ellipses, rectangles, arcs, pie, Bezier curves, paths.\r\n- Layers\r\n- Patterns\r\n- Drawing of external page content\r\n- Color spaces\r\n- Barcode\r\n\r\n**Forms**\r\n\r\n- Create, load and save PDF forms\r\n- Add, edit, remove and rename form fields\r\n- Supporting text box fields, combo box fields, list box fields, push button fields, radio button fields\r\n- Flatten form fields\r\n- Enumerating the form fields\r\n- Form actions\r\n\r\n**Fonts**\r\n\r\n- Standard Fonts\r\n\r\n**Images**\r\n\r\n- Jpeg image support\r\n\r\n**Tables:**\r\n\r\n- Cell/Row/Column formatting\r\n- Header\r\n- Pagination\r\n- Borders\r\n- Row span and column span\r\n- Nested\r\n- Cell Padding and spacing\r\n\r\n**Page Level Operations**\r\n\r\n- Headers and Footers\r\n- Page Label\r\n- Automatic fields\r\n\r\n**Pdf Annotations**\r\n\r\n- Add, edit and remove pdf annotations\r\n- Custom appearance for annotations\r\n\r\n**Supported annotations**\r\n\r\n- Free Text annotation\r\n- Rubber stamp annotations\r\n- File attachment annotation\r\n- Link annotation\r\n- Line annotation\r\n- Ink annotations\r\n- Text markup annotations\r\n- sound annotations\r\n- 3D-Annotations.\r\n\r\n**Barcode**\r\n\r\n- Add the barcode into the PDF document\r\n\r\n**Supported barcodes:**\r\n\r\n- QR barcode\r\n- Data matrix barcode\r\n- Code39\r\n- Code39ext\r\n- Code 11\r\n- Coda bar\r\n- Code32\r\n- Code93\r\n- Code93 extended\r\n- Code128 A\r\n- Code128 B\r\n- Code128 C\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"BusyIndicator\"\u003e\u003c/a\u003eBusyIndicator\r\n\r\nThe BusyIndicator has 10 built in animations.\r\n\r\n\r\n\r\n**Custom Message**\r\n\r\nThe Title property can be used to customize the label for each animation.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"RangeSlider\"\u003e\u003c/a\u003eRangeSlider\r\n\r\nRangeSlider allows the user to select the range of values. The range can be adjusted by moving the thumb control along a track.\r\n\r\n\r\n\r\n**Orientation**\r\n\r\nRangeSlider can be horizontal or vertical.\r\n\r\n\r\n\r\n**Slider View**\r\n\r\nRangeSlider can be used as a simple slider.\r\n\r\n\r\n\r\n**Customization**\r\n\r\nAbility to customize the appearance of Tick and Label using placement options.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"AutoComplete\"\u003e\u003c/a\u003eAutoComplete\r\n\r\nThe AutoComplete control simplifies data input by providing end users with possible matches as soon as they start typing.\r\n\r\n\r\n\r\n**AutoCompleteMode**\r\n\r\nThe AutoCompleteMode property can be used to display the filtered suggestions like Suggest, Append and SuggestAppend.\r\n\r\n\r\n\r\n**Watermark**\r\n\r\nThe WaterMark will prompt the user with some information, when it is not in focus and contains an empty string.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"NumericTextBox\"\u003e\u003c/a\u003eNumericTextBox\r\n\r\nNumeric textbox restricts the input to numeric values. The control respects the UI culture and can be configured to display different formats like currency format, scientific format, etc.\r\n\r\n\r\n\r\n**Culture**\r\n\r\nThe Culture property can be used to represent the values based on the provided culture.\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Calendar\"\u003e\u003c/a\u003eCalendar\r\n\r\nCalendar control provides an elegant UI to visualize and selecting dates in month view.\r\n\r\n\r\n\r\n**Navigation**\r\n\r\nBuilt-in year view made easy month navigation.\r\n\r\n\r\n\r\n**Selection**\r\n\r\nOptions to perform the single and multiple dates selection.\r\n\r\n\r\n\r\n**Inline Events**\r\n\r\nEnd users can show their appointment details using inline events represented in expanded view of date cell.\r\n\r\n\r\n\r\n**Date Constraints**\r\n\r\nEfficient date restrictions functionality to preventing selection with certain dates.\r\n\r\n\r\n\r\n**Globalization**\r\n\r\nIt has built-in complete globalization support to represent the Calendar to its specific culture.\r\n\r\n\r\n\r\n\r\n\r\n|  |\r\n| --- |\r\n|  |\r\n\r\n#\u003ca id=\"Rating\"\u003e\u003c/a\u003eRating\r\n\r\nRating control has a group of stars to indicate the rating with flexible precisions.\r\n\r\n\r\n\r\n**Flexible Precision**\r\n\r\nProvides flexible precision to handle full, half or exact values of rating.\r\n\r\n\r\n\r\n**Customization**\r\n\r\nLook and feel can be customized to fit your application.\r\n\r\n\r\n","Version":"13.4.0.53","Summary":"Syncfusion Essential Studio is a collection of user interface and file format manipulation components for Xamarin.iOS, Xamarin.Android and Xamarin.Forms.","QuickStart":"This section contains getting started tutorials that provide a quick overview for working with our components. The goal is to get you up and running as soon as possible.\r\n\r\n**Grid**\r\n\r\n  [__DataGrid For Forms__](#DataGrid)\r\n\r\n  [__DataGrid For Android__](#DataGridAndroid)\r\n\r\n  [__DataGrid For iOS__](#DataGridiOS)\r\n\r\n**Data Visualization**\r\n\r\n  [__Chart__](#Chart)\r\n  \r\n  [__Schedule__](#Schedule)\r\n\r\n  [__Gauge__](#Gauge)\r\n  \r\n  [__Digital Gauge__](#DigitalGauge)\r\n  \r\n  [__Linear Gauge__](#LinearGauge)\r\n\r\n  [__TreeMap__](#TreeMap)\r\n  \r\n  [__Barcode__](#Barcode)\r\n\r\n**File Format**\r\n\r\n  [__XlsIO__](#XlsIO)\r\n\r\n  [__DocIO__](#DocIO)\r\n\r\n  [__PDF__](#PDF)\r\n  \r\n**Notification**\r\n\r\n  [__BusyIndicator__](#BusyIndicator)\r\n  \r\n**Editors**\r\n\r\n  [__RangeSlider__](#RangeSlider)\r\n\r\n  [__AutoComplete__](#AutoComplete)\r\n  \r\n  [__NumericTextBox__](#NumericTextBox)\r\n  \r\n  [__Calendar__](#Calendar)\r\n \r\n#\u003ca id=\"DataGrid\"\u003e\u003c/a\u003eDataGrid\r\n\r\nThis section provides a quick overview for working with Essential DataGrid for Xamarin.Forms. We will walk through the entire process of creating a real world datagrid.\r\n\r\nThis is how the final output will look like on iOS, Android and Windows Phone devices. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.4.0.53/Samples/Xamarin/DataGrid_GettingStartedForms.zip).\r\n\r\n\r\n\r\n**Getting started**\r\n \r\nThis section provides a quick overview of the working with Essential DataGrid for Xamarin.Forms.\r\n\r\nAfter installing Essential Studio for Xamarin, you can find all the required assemblies in the following installation folders,\r\n\r\n**{Syncfusion Essential Studio Installed location}\\Essential Studio\\13.2.0.29\\lib**\r\n\r\n***Note: Assemblies can be found in unzipped package location in Mac***\r\n\r\nAdd the following assemblies to the respective projects as follows:\r\n\r\n**PCL project**\r\n```\r\npcl\\Syncfusion.Data.Portable.dll\r\npcl\\Syncfusion.GridCommon.Portable.dll\r\npcl\\Syncfusion.SfDataGrid.XForms.dll\r\n```\r\n\r\n**Android project**\r\n```\r\nandroid\\Syncfusion.SfDataGrid.XForms.Android.dll\r\n```\r\n\r\n**iOS project**\r\n```\r\npcl\\Syncfusion.GridCommon.Portable.dll\r\nios\\Syncfusion.SfDataGrid.XForms.iOS.dll\r\n```\r\n\r\n**WindowsPhone project**\r\n```\r\nwp8\\Syncfusion.SfDataGrid.XForms.WinPhone.dll\r\n```\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to initialize the DataGrid renderer as shown below.\r\n\r\nCall the SfDataGridRenderer.Init() in MainPage constructor of the Windows Phone project as shown below\r\n```\r\npublic MainPage()\r\n{\r\n    …\r\n    SfDataGridRenderer.Init();\r\n    …\r\n}\r\n```\r\n\r\nCall the SfDataGridRenderer.Init() in the FinishedLaunching overridden method of the AppDelegate class in the iOS project as follows.\r\n```\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n    …\r\n    SfDataGridRenderer.Init();\r\n    …\r\n}\r\n```\r\n\r\n**Create your first DataGrid in Xamarin.Forms**\r\n\r\nThe DataGrid control can be configured entirely in C# code or by using XAML markup.\r\n\r\n1.Create new BlankApp (Xamarin.Forms.Portable) application in Xamarin Studio or Visual Studio.\r\n\r\n2.Now, create a simple data source as shown in the following code example. Add the following code example in a newly created class file and save it as OrderInfo.cs file.\r\n\r\n\r\n```csharp\r\npublic class OrderInfo\r\n{\r\n    private int orderID;\r\n    private string customerID;\r\n    private string customer;\r\n    private string shipCity;\r\n    private string shipCountry;\r\n\r\n    public int OrderID {\r\n        get { return orderID; }\r\n        set { this.orderID = value; }\r\n    }\r\n\r\n    public string CustomerID {\r\n        get { return customerID; }\r\n        set { this.customerID = value; }\r\n    }\r\n\r\n    public string ShipCountry {\r\n        get { return shipCountry; }\r\n        set { this.shipCountry = value; }\r\n    }\r\n\r\n    public string Customer {\r\n        get { return this.customer; }\r\n        set { this.customer = value; }\r\n    }\r\n\r\n    public string ShipCity {\r\n        get { return shipCity; }\r\n        set { this.shipCity = value; }\r\n    }\r\n\r\n    public OrderInfo (int orderId, string customerId, string country, string customer, string shipCity)\r\n    {\r\n        this.OrderID = orderId;\r\n        this.CustomerID = customerId;\r\n        this.Customer = customer;\r\n        this.ShipCountry = country;\r\n        this.ShipCity = shipCity;\r\n    }\r\n} \r\n```\r\n\r\n\r\n3.Add the following code example in a newly created class file and save it as OrderInfoRepositiory.cs file.\r\n\t  \r\n```csharp\r\npublic class OrderInfoRepository\r\n{\r\n    private ObservableCollection\u003cOrderInfo\u003e orderInfo;\r\n    public ObservableCollection\u003cOrderInfo\u003e OrderInfoCollection {\r\n        get { return orderInfo; }\r\n        set { this.orderInfo = value; }\r\n    }\r\n\t\r\n    public OrderInfoRepository ()\r\n    {\r\n        orderInfo = new ObservableCollection\u003cOrderInfo\u003e ();\r\n        this.GenerateOrders ();\r\n    }\r\n\t\r\n    private void GenerateOrders ()\r\n    {\r\n        orderInfo.Add (new OrderInfo (1001, \"Maria Anders\", \"Germany\", \"ALFKI\", \"Berlin\"));\r\n        orderInfo.Add (new OrderInfo (1002, \"Ana Trujilo\", \"Mexico\", \"ANATR\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1003, \"Ant Fuller\", \"Mexico\", \"ANTON\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1004, \"Thomas Hardy\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1005, \"Tim Adams\", \"Sweden\", \"BERGS\", \"Luleå\"));\r\n        orderInfo.Add (new OrderInfo (1006, \"Hanna Moos\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n        orderInfo.Add (new OrderInfo (1007, \"Andrew Fuller\", \"France\", \"BLONP\", \"Strasbourg\"));\r\n        orderInfo.Add (new OrderInfo (1008, \"Martin King\", \"Spain\", \"BOLID\", \"Madrid\"));\r\n        orderInfo.Add (new OrderInfo (1009, \"Lenny Lin\", \"France\", \"BONAP\", \"Marseille\"));\r\n        orderInfo.Add (new OrderInfo (1010, \"John Carter\", \"Canada\", \"BOTTM\", \"Tsawassen\"));\r\n        orderInfo.Add (new OrderInfo (1011, \"Lauro King\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1012, \"Anne Wilson\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n\t\torderInfo.Add (new OrderInfo (1013, \"Alfki Kyle\", \"France\", \"BLONP\", \"Strasbourg\"));\r\n        orderInfo.Add (new OrderInfo (1014, \"Gina Irene\", \"UK\", \"AROUT\", \"London\"));\r\n    }\r\n} \r\n```\r\n4.You can set the data source of the DataGrid by using the SfDataGrid.ItemsSource property as follows.\r\n\r\n**[C#]**\r\n```csharp\r\npublic class App : Application\r\n{\r\n    SfDataGrid sfGrid;\r\n    public App()\r\n    {\r\n        sfGrid = new SfDataGrid();\r\n        sfGrid.ItemsSource = new OrderInfoRepository().OrderInfoCollection;\r\n        MainPage = new ContentPage { Content = sfGrid; };\r\n    }\r\n} \r\n```\r\n\r\n**[XAML]**\r\n```xml\r\n\u003cxmlns:sfgrid=\"clr-namespace:Syncfusion.SfDataGrid.XForms;assembly=Syncfusion.SfDataGrid.XForms\"\r\n\r\n\u003csfgrid:SfDataGrid x:Name=\"dataGrid\"\r\n                   ItemsSource=\"{Binding OrderInfoCollection}\" /\u003e  \r\n```\r\n\r\n5.By default, Essential DataGrid for Xamarin.Forms automatically creates columns for all the properties in the data source. \r\n6.Execute the application to render the following output.\r\n\r\n\r\n\r\n7.You can also define the columns manually by setting the SfDataGrid.AutoGenerateColumns property to false and by adding the GridColumn objects to the SfDataGrid.Columns collection. The following code example illustrates this.\r\n\t  \r\n**[C#]**\r\n```csharp\r\nsfGrid.AutoGenerateColumns = false;\r\n\r\nGridTextColumn orderIdColumn = new GridTextColumn ();\r\norderIdColumn.MappingName = \"OrderID\";\r\norderIdColumn.HeaderText = \"Order ID\";\r\n\r\nGridTextColumn customerIdColumn = new GridTextColumn ();\r\ncustomerIdColumn.MappingName = \"CustomerID\";\r\ncustomerIdColumn.HeaderText = \"Customer ID\";\r\n\r\nGridTextColumn customerColumn = new GridTextColumn ();\r\ncustomerColumn.MappingName = \"Customer\";\r\ncustomerColumn.HeaderText = \"Customer\";\r\n\r\nGridTextColumn countryColumn = new GridTextColumn ();\r\ncountryColumn.MappingName = \"ShipCountry\";\r\ncountryColumn.HeaderText = \"Ship Country\";\r\n\r\nsfGrid.Columns.Add (orderIdColumn);\r\nsfGrid.Columns.Add (customerIdColumn);\r\nsfGrid.Columns.Add (customerColumn);\r\nsfGrid.Columns.Add (countryColumn);\r\n```\t\r\n\r\n**[XAML]**\r\n```xml\r\n\u003csfgrid:SfDataGrid.Columns x:TypeArguments=\"sfgrid:Columns\"\u003e\r\n\r\n    \u003csfgrid:GridTextColumn HeaderText=\"Order ID\" MappingName=\"OrderID\" /\u003e\r\n    \u003csfgrid:GridTextColumn HeaderText=\"Customer ID\" MappingName=\"CustomerID\" /\u003e\r\n    \u003csfgrid:GridTextColumn MappingName=\"Customer\" /\u003e\r\n    \u003csfgrid:GridTextColumn HeaderText=\"Ship Country\" MappingName=\"ShipCountry\" /\u003e\r\n\r\n\u003c/sfgrid:SfDataGrid.Columns\u003e  \r\n```  \r\n\r\n8.Essential DataGrid for Xamarin.Forms allows you to apply sorting on its data by setting AllowSorting to true. The following code illustrates this.\r\n\r\n**[C#]**\r\n```csharp\r\nsfGrid.AllowSorting = true; \r\n```\r\n\r\n**[XAML]**\r\n```xml\r\n\u003csfgrid:SfDataGrid AllowSorting=\"True\" /\u003e\r\n```\r\n\t\r\n9.Execute the application and touch the header cell to sort the data and the following output is displayed\r\n\r\n \t \r\n\r\n10.You can also specify the column to be sorted from the code behind by adding the column to the SfDataGrid.SortColumnDescriptions collection. The following code illustrates this.\r\n\r\n**[C#]**\r\n```csharp\r\nsfGrid.SortColumnDescriptions.Add (new SortColumnDescription () { ColumnName = \"CustomerID\" });\r\n```\r\n\r\n**[XAML]**\r\n```xml\r\n\u003csfgrid:SfDataGrid.SortColumnDescriptions\u003e\r\n    \u003csfgrid:SortColumnDescription ColumnName=\"CustomerID\" /\u003e\r\n\u003c/sfgrid:SfDataGrid.SortColumnDescriptions\u003e \r\n```\r\n\r\n11.You can group a column by adding the column to the SfDataGrid.GroupColumnDescriptions collection. Following code example illustrates this.\r\n\r\n**[C#]**\r\n```csharp\r\nsfGrid.GroupColumnDescriptions.Add (new GroupColumnDescription (){ ColumnName = \"ShipCountry\" }); \r\n````\r\n\r\n**[XAML]**\r\n```xml\r\n\u003csfgrid:SfDataGrid.GroupColumnDescriptions\u003e\r\n    \u003csfgrid:GroupColumnDescription ColumnName=\"ShipCountry\" /\u003e\r\n\u003c/sfgrid:SfDataGrid.GroupColumnDescriptions\u003e  \r\n```\r\n\r\n12.Execute the application to render the following output.\r\n\t\r\n\r\n\r\n13.You can filter the records in the view by using the SfDataGrid.View.Filter property. You have to call SfDataGrid.View.RefreshFilter() method after assigning the Filter property for the records to get filtered in view. The following code example illustrates this.\r\n\r\n**[C#]**\r\n```csharp\r\n//Create a SearchBar in the layout and assign its text to a property. When the property gets changed, run the below code for filtering the view.\r\n\r\nif (sfGrid.View != null) {\r\n    this.sfGrid.View.Filter = viewModel.FilerRecords;\r\n    this.sfGrid.View.RefreshFilter ();\r\n} \r\n\r\n//create a method FilterRecords in the viewModel\r\n\r\npublic bool FilerRecords (object orderInfo)\r\n{\r\n    //your code\r\n\r\n    //For Example\r\n    var order = orderInfo as OrderInfo;\r\n    if (order.CustomerID.Contains (\"An\"))\r\n        return true;\r\n    false;\r\n} \r\n```\r\n \r\n#\u003ca id=\"DataGridAndroid\"\u003e\u003c/a\u003eDataGrid for Xamarin.Android\r\n\r\nThis section provides a quick overview for working with Essential DataGrid for Xamarin.Android. We will walk through the entire process of creating a real world datagrid.\r\n\r\nThis is how the final output will look like on Android devices. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.4.0.53/Samples/Xamarin/DataGrid_GettingStartedAndroid.zip).\r\n\r\n\r\n\r\n**Referencing Essential Studio components in your solution**\r\n \r\nThis topic describes about the assembly that is required in your Android application when you use SfDataGrid. After installing Essential Studio for Xamarin, you can find all the required assemblies in the installation folders.\r\n\r\n**{Syncfusion Essential Studio Installed location}\\Essential Studio\\13.2.0.29\\lib**\r\n\r\n***Note: Assemblies can be found in unzipped package location in Mac***\r\n\r\n```\r\nSyncfusion.Linq.Android.dll\r\nSyncfusion.SfDataGrid.Android.dll\r\nSyncfusion.GridCommon.Portable.dll\r\n```\r\n\r\n**Create your first DataGrid in Xamarin Android**\r\n\r\n1.Create a new Android application in Xamarin Studio.\r\n\r\n2.Now, create a simple data source as shown in the following code example. Add the following code example in a newly created class file and save it as OrderInfo.cs file.\r\n\r\n```csharp\r\npublic class OrderInfo\r\n{\r\n    private int orderID;\r\n    private string customerID;\r\n    private string customer;\r\n    private string shipCity;\r\n    private string shipCountry;\r\n\r\n    public int OrderID {\r\n        get { return orderID; }\r\n        set { this.orderID = value; }\r\n    }\r\n\r\n    public string CustomerID {\r\n        get { return customerID; }\r\n        set { this.customerID = value; }\r\n    }\r\n\r\n    public string ShipCountry {\r\n        get { return shipCountry; }\r\n        set { this.shipCountry = value; }\r\n    }\r\n\r\n    public string Customer {\r\n        get { return this.customer; }\r\n        set { this.customer = value; }\r\n    }\r\n\r\n    public string ShipCity {\r\n        get { return shipCity; }\r\n        set { this.shipCity = value; }\r\n    }\r\n\r\n    public OrderInfo (int orderId, string customerId, string country, string customer, string shipCity)\r\n    {\r\n        this.OrderID = orderId;\r\n        this.CustomerID = customerId;\r\n        this.Customer = customer;\r\n        this.ShipCountry = country;\r\n        this.ShipCity = shipCity;\r\n    }\r\n} \r\n```\r\n\r\n\r\n3.Add the following code example in a newly created class file and save it as OrderInfoRepositiory.cs file\r\n\t  \r\n```csharp\r\npublic class OrderInfoRepository\r\n{\r\n    private ObservableCollection\u003cOrderInfo\u003e orderInfo;\r\n    public ObservableCollection\u003cOrderInfo\u003e OrderInfoCollection {\r\n        get { return orderInfo; }\r\n        set { this.orderInfo = value; }\r\n    }\r\n    public OrderInfoRepository ()\r\n    {\r\n        orderInfo = new ObservableCollection\u003cOrderInfo\u003e ();\r\n        this.GenerateOrders ();\r\n    }\r\n    private void GenerateOrders ()\r\n    {\r\n        orderInfo.Add (new OrderInfo (1001, \"Maria Anders\", \"Germany\", \"ALFKI\", \"Berlin\"));\r\n        orderInfo.Add (new OrderInfo (1002, \"Ana Trujilo\", \"Mexico\", \"ANATR\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1003, \"Ant Fuller\", \"Mexico\", \"ANTON\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1004, \"Thomas Hardy\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1005, \"Tim Adams\", \"Sweden\", \"BERGS\", \"Luleå\"));\r\n        orderInfo.Add (new OrderInfo (1006, \"Hanna Moos\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n        orderInfo.Add (new OrderInfo (1007, \"Andrew Fuller\", \"France\", \"BLONP\", \"Strasbourg\"));\r\n        orderInfo.Add (new OrderInfo (1008, \"Martin King\", \"Spain\", \"BOLID\", \"Madrid\"));\r\n        orderInfo.Add (new OrderInfo (1009, \"Lenny Lin\", \"France\", \"BONAP\", \"Marseille\"));\r\n        orderInfo.Add (new OrderInfo (1010, \"John Carter\", \"Canada\", \"BOTTM\", \"Tsawassen\"));\r\n        orderInfo.Add (new OrderInfo (1011, \"Lauro King\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1012, \"Anne Wilson\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n    }\r\n} \r\n\r\n```\r\n4.You can set the data source of the DataGrid by using the SfDataGrid.ItemsSource property as follows.\r\n\r\n```csharp\r\n[Activity (Label = \"GettingStarted\", MainLauncher = true)]\r\npublic class MainActivity : Activity\r\n{\r\n    SfDataGrid sfGrid;\r\n    protected override void OnCreate (Bundle bundle)\r\n    {\r\n        base.OnCreate (bundle);\r\n        SetContentView (Resource.Layout.Main);\r\n        RelativeLayout layout = (RelativeLayout)FindViewById (Resource.Id.Relative);\r\n        sfGrid = new SfDataGrid (BaseContext);\r\n        sfGrid.ItemsSource = (new OrderInfoRepository ().OrderInfoCollection);\r\n        layout.AddView (sfGrid);\r\n    }\r\n} \r\n\r\n```\r\n5.By default, the Essential DataGrid for Android automatically creates columns for all properties in the data source.\r\n\r\n6.Run the application to render the following output.\r\n\r\n\r\n\r\n7.You can also define the columns manually by setting the SfDataGrid.AutoGenerateColumns property to false and add the GridColumn objects to the SfDataGrid.Columns collection. The following code example illustrates this.\r\n\t  \r\n```csharp\r\nsfGrid.AutoGenerateColumns = false;\r\n\r\nGridTextColumn orderIdColumn = new GridTextColumn ();\r\norderIdColumn.MappingName = \"OrderID\";\r\norderIdColumn.HeaderText = \"Order ID\";\r\n\r\nGridTextColumn customerIdColumn = new GridTextColumn ();\r\ncustomerIdColumn.MappingName = \"CustomerID\";\r\ncustomerIdColumn.HeaderText = \"Customer ID\";\r\n\r\nGridTextColumn customerColumn = new GridTextColumn ();\r\ncustomerColumn.MappingName = \"Customer\";\r\ncustomerColumn.HeaderText = \"Customer\";\r\n\r\nGridTextColumn countryColumn = new GridTextColumn ();\r\ncountryColumn.MappingName = \"ShipCountry\";\r\ncountryColumn.HeaderText = \"Ship Country\";\r\n\r\nsfGrid.Columns.Add (orderIdColumn);\r\nsfGrid.Columns.Add (customerIdColumn);\r\nsfGrid.Columns.Add (customerColumn);\r\nsfGrid.Columns.Add (countryColumn); \r\n```\t  \r\n\r\n8.Essential DataGrid for Android allows you to apply sorting on its data by setting AllowSorting to true. The following code illustrates this.\r\n\r\n```csharp\r\nsfGrid.AllowSorting = true; \r\n```\r\n\t\r\n9.Run the application and touch the header cell to sort the data and the following output is displayed. \r\n\r\n \t \r\n\r\n10.You can also specify the column to be sorted from the code behind by adding the column to the SfDataGrid.SortColumnDescriptions collection. The following code illustrates this.\r\n\r\n```csharp\r\nsfGrid.SortColumnDescriptions.Add (new SortColumnDescription () { ColumnName = \"OrderID\" });\r\n```\r\n\r\n11.Essential DataGrid for Android allows you to group a column by adding the column to the SfDataGrid.GroupColumnDescriptions collection. The following code example illustrates this.\r\n\r\n```csharp\r\nsfGrid.GroupColumnDescriptions.Add (new GroupColumnDescription (){ ColumnName = \"ShipCountry\" }); \r\n````\r\n\r\n12.Run the application to render the following output.\r\n\t\r\n\r\n\r\n13.Essential DataGrid for Android allows you to filter the records in the view by using the SfDataGrid.View.Filter property. You have to call SfDataGrid.View.RefreshFilter() method after assigning the Filter property for the records to get filtered in view. The following code example illustrates this.\r\n\r\n```csharp\r\n//Create an EditText in the layout and assign its text to a property. When the property gets changed, run the below code for filtering the view.\r\n\r\nif (sfGrid.View != null) {\r\n    this.sfGrid.View.Filter = viewModel.FilerRecords;\r\n    this.sfGrid.View.RefreshFilter ();\r\n} \r\n\r\n//create a method FilterRecords in the viewModel\r\n\r\npublic bool FilerRecords (object orderInfo)\r\n{\r\n    //your code\r\n\r\n    //For Example\r\n    var order = orderInfo as OrderInfo;\r\n    if (order.CustomerID.Contains (\"An\"))\r\n        return true;\r\n    false;\r\n} \r\n```\r\n\r\n#\u003ca id=\"DataGridiOS\"\u003e\u003c/a\u003eDataGrid for Xamarin.iOS\r\n\r\nThis section provides a quick overview for working with Essential DataGrid for Xamarin.iOS. We will walk through the entire process of creating a real world datagrid.\r\n\r\nThis is how the final output will look like on iOS devices. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.4.0.53/Samples/Xamarin/DataGrid_GettingStartediOS.zip).\r\n\r\n\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nThis topic describes about the assembly that is required in your iOS application, when you use SfDataGrid. After installing Essential Studio for Xamarin, you can find all the required assemblies in the following installation folders,\r\n\r\n**{Syncfusion Essential Studio Installed location}\\Essential Studio\\13.2.0.29\\lib**\r\n\r\n***Note: Assemblies can be found in unzipped package location in Mac***\r\n\r\n```\r\nSyncfusion.Linq.iOS.dll\r\nSyncfusion.SfDataGrid.iOS.dll\r\nSyncfusion.GridCommon.Portable.dll\r\n```\r\n\r\nCreate your first DataGrid in Xamarin iOS\r\n\r\n1.Create new iOS application in Xamarin Studio.\r\n\r\n2.Now, create a simple data source as shown in the following code example. Add the following code example in a newly created class file and save it as OrderInfo.cs file.\r\n\r\n```csharp\r\npublic class OrderInfo\r\n{\r\n    private int orderID;\r\n    private string customerID;\r\n    private string customer;\r\n    private string shipCity;\r\n    private string shipCountry;\r\n\r\n    public int OrderID {\r\n        get { return orderID; }\r\n        set { this.orderID = value; }\r\n    }\r\n\r\n    public string CustomerID {\r\n        get { return customerID; }\r\n        set { this.customerID = value; }\r\n    }\r\n\r\n    public string ShipCountry {\r\n        get { return shipCountry; }\r\n        set { this.shipCountry = value; }\r\n    }\r\n\r\n    public string Customer {\r\n        get { return this.customer; }\r\n        set { this.customer = value; }\r\n    }\r\n\r\n    public string ShipCity {\r\n        get { return shipCity; }\r\n        set { this.shipCity = value; }\r\n    }\r\n\r\n    public OrderInfo (int orderId, string customerId, string country, string customer, string shipCity)\r\n    {\r\n        this.OrderID = orderId;\r\n        this.CustomerID = customerId;\r\n        this.Customer = customer;\r\n        this.ShipCountry = country;\r\n        this.ShipCity = shipCity;\r\n    }\r\n} \r\n```\r\n3.Add the following code example in a newly created class file and save it as OrderInfoRepositiory.cs file.\r\n\r\n```csharp\r\npublic class OrderInfoRepository\r\n{\r\n    private ObservableCollection\u003cOrderInfo\u003e orderInfo;\r\n    public ObservableCollection\u003cOrderInfo\u003e OrderInfoCollection {\r\n        get { return orderInfo; }\r\n        set { this.orderInfo = value; }\r\n    }\r\n    public OrderInfoRepository ()\r\n    {\r\n        orderInfo = new ObservableCollection\u003cOrderInfo\u003e ();\r\n        this.GenerateOrders ();\r\n    }\r\n    private void GenerateOrders ()\r\n    {\r\n        orderInfo.Add (new OrderInfo (1001, \"Maria Anders\", \"Germany\", \"ALFKI\", \"Berlin\"));\r\n        orderInfo.Add (new OrderInfo (1002, \"Ana Trujilo\", \"Mexico\", \"ANATR\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1003, \"Ant Fuller\", \"Mexico\", \"ANTON\", \"México D.F.\"));\r\n        orderInfo.Add (new OrderInfo (1004, \"Thomas Hardy\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1005, \"Tim Adams\", \"Sweden\", \"BERGS\", \"Luleå\"));\r\n        orderInfo.Add (new OrderInfo (1006, \"Hanna Moos\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n        orderInfo.Add (new OrderInfo (1007, \"Andrew Fuller\", \"France\", \"BLONP\", \"Strasbourg\"));\r\n        orderInfo.Add (new OrderInfo (1008, \"Martin King\", \"Spain\", \"BOLID\", \"Madrid\"));\r\n        orderInfo.Add (new OrderInfo (1009, \"Lenny Lin\", \"France\", \"BONAP\", \"Marseille\"));\r\n        orderInfo.Add (new OrderInfo (1010, \"John Carter\", \"Canada\", \"BOTTM\", \"Tsawassen\"));\r\n        orderInfo.Add (new OrderInfo (1011, \"Lauro King\", \"UK\", \"AROUT\", \"London\"));\r\n        orderInfo.Add (new OrderInfo (1012, \"Anne Wilson\", \"Germany\", \"BLAUS\", \"Mannheim\"));\r\n    }\r\n} \r\n```\r\n\r\n4.You can set the data source of the DataGrid by using the SfDataGrid.ItemsSource property as follows.\r\n\r\n```csharp\r\npublic partial class GettingStartedViewController : UIViewController\r\n{\r\n    SfDataGrid sfGrid;\r\n\r\n    static bool UserInterfaceIdiomIsPhone {\r\n        get { return UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone; }\r\n    }\r\n\r\n    public GettingStartedViewController ()\r\n        : base (UserInterfaceIdiomIsPhone ? \"GettingStartedViewController_iPhone\" : \"GettingStartedViewController_iPad\", null)\r\n    {\r\n        sfGrid = new SfDataGrid ();\r\n        sfGrid.ItemsSource = (new OrderInfoRepository ().OrderInfoCollection);\r\n        sfGrid.HeaderRowHeight = 45;\r\n        sfGrid.RowHeight = 45;\r\n    }\r\n\r\n    public override void ViewDidLoad ()\r\n    {\r\n        base.ViewDidLoad ();\r\n        sfGrid.Frame = new CGRect (0, 30, View.Frame.Width, View.Frame.Height);\r\n        View.AddSubview (sfGrid);\r\n    }\r\n} \r\n```\r\n\r\n5.By default, the Essential DataGrid for iOS automatically creates columns for all the properties in the data source. \r\n\r\n6.Run the application to render the following output.\r\n\r\n\r\n\r\n7.You can also define the columns manually by setting the SfDataGrid.AutoGenerateColumns property to false and add the GridColumn objects to the SfDataGrid.Columns collection. The following code example illustrates this. \r\n\r\n```csharp\r\nsfGrid.AutoGenerateColumns = false;\r\n\r\nGridTextColumn orderIdColumn = new GridTextColumn ();\r\norderIdColumn.MappingName = \"OrderID\";\r\norderIdColumn.HeaderText = \"Order ID\";\r\n\r\nGridTextColumn customerIdColumn = new GridTextColumn ();\r\ncustomerIdColumn.MappingName = \"CustomerID\";\r\ncustomerIdColumn.HeaderText = \"Customer ID\";\r\n\r\nGridTextColumn customerColumn = new GridTextColumn ();\r\ncustomerColumn.MappingName = \"Customer\";\r\ncustomerColumn.HeaderText = \"Customer\";\r\n\r\nGridTextColumn countryColumn = new GridTextColumn ();\r\ncountryColumn.MappingName = \"ShipCountry\";\r\ncountryColumn.HeaderText = \"Ship Country\";\r\n\r\nsfGrid.Columns.Add (orderIdColumn);\r\nsfGrid.Columns.Add (customerIdColumn);\r\nsfGrid.Columns.Add (customerColumn);\r\nsfGrid.Columns.Add (countryColumn); \r\n```\r\n\r\n8.Essential DataGrid for iOS allows you to apply sorting on its data by setting AllowSorting to true. The following code illustrates this.\r\n\r\n```csharp\r\nsfGrid.AllowSorting = true; \r\n```\r\n9.Run the application and touch the header cell to sort the data and the following output is displayed. \r\n\r\n\r\n\r\n\r\n10.You can also specify the column to be sorted from the code behind by adding the column to the SfDataGrid.SortColumnDescriptions collection. The following code illustrates this.\r\n\r\n```csharp\r\nsfGrid.SortColumnDescriptions.Add (new SortColumnDescription () { ColumnName = \"OrderID\" });\r\n```\r\n\r\n11.Essential DataGrid for iOS allows you to group a column by adding the column to the SfDataGrid.GroupColumnDescriptions collection. Following code example illustrates this.\r\n\r\n```csharp\r\nsfGrid.GroupColumnDescriptions.Add (new GroupColumnDescription (){ ColumnName = \"ShipCountry\" }); \r\n```\r\n\r\n12.Run the application to render the following output.\r\n\r\n\r\n\r\n13.Essential DataGrid for iOS allows you to filter the records in the view by using the SfDataGrid.View.Filter property. You have to call SfDataGrid.View.RefreshFilter() method after assigning the Filter property for the records to get filtered in view. The following code example illustrates this.\r\n\r\n```csharp\r\n//Create a UITextView in the layout and assign its text to a property. When the property gets changed, run the below code for filtering the view. \r\n\r\nif (sfGrid.View != null) {\r\n    this.sfGrid.View.Filter = viewModel.FilerRecords;\r\n    this.sfGrid.View.RefreshFilter ();\r\n} \r\n\r\n//create a method FilterRecords in the viewModel\r\n\r\npublic bool FilerRecords (object orderInfo)\r\n{\r\n    //your code\r\n\r\n    //For Example\r\n    var order = orderInfo as OrderInfo;\r\n    if (order.CustomerID.Contains (\"An\"))\r\n        return true;\r\n    false;\r\n} \r\n```\r\n\r\n\r\n\r\n#\u003ca id=\"Chart\"\u003e\u003c/a\u003eCreating your first Chart in Xamarin.Forms\r\n\r\nThis section provides a quick overview for working with Essential Chart for Xamarin.Forms. We will walk through the entire process of creating a real world chart.\r\n\r\nThe goal of this tutorial is to visualize the weather data for Washington, DC during the period 1961-1990. The raw sample data is given below.\r\n\r\n| Month | High | Low | Precipitation |\r\n| --- | --- | --- | --- |\r\n| January | 42 | 27 | 3.03 |\r\n| February | 44 | 28 | 2.48 |\r\n| March | 53 | 35 | 3.23 |\r\n| April | 64 | 44 | 3.15 |\r\n| May | 75 | 54 | 4.13 |\r\n| June | 83 | 63 | 3.23 |\r\n| July | 87 | 68 | 4.13 |\r\n| August | 84 | 66 | 4.88 |\r\n| September | 78 | 59 | 3.82 |\r\n| October | 67 | 48 | 3.07 |\r\n| November | 55 | 38 | 2.83 |\r\n| December | 45 | 29 | 2.8 |\r\n\r\nTable 1: Sample weather data.\r\n\r\nThis is how the final output will look like on iOS, Android and Windows Phone devices. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v12.2.0.40/Samples/Xamarin/Chart_GettingStarted.zip).\r\n\r\n\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nIf you had acquired Essential Studio components through the Xamarin component store interface from within your IDE, then after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component manager, you will still need to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL project in your solution. You can do this by manually adding the relevant PCL assembly references to your PCL project contained in the following path inside of your solution folder  \r\n\r\n```\r\nComponents/syncfusionessentialstudio-version/lib/pcl/\r\n```\r\n\r\nAlternatively if you had downloaded Essential Studio from Syncfusion.com or through the Xamarin store web interface then all assembly references need to be added manually.  \r\n\r\nAfter installing Essential Studio for Xamarin, all the required assemblies can be found in the installation folders, typically\r\n\t\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\nor after downloading through the Xamarin store web interface, all the required assemblies can be found in the below folder\r\n\r\n**{download location}\\syncfusionessentialstudio-version\\lib**\r\n\r\nYou can then add the assembly references to the respective projects as shown below\r\n\r\n**PCL project**\r\n\r\n```\r\npcl\\Syncfusion.SfChart.XForm.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nandroid\\Syncfusion.SfChart.Android.dll\r\nandroid\\Syncfusion.SfChart.xForms.Android.dll\r\n```\r\n\r\n**iOS(Classic) project**\r\n\r\n```\r\nios\\Syncfusion.SfChart.iOS.dll \r\nios\\Syncfusion.SfChart.xForms.iOS.dll\r\nios\\Syncfusion.SfChart.XForm.dll\r\n```\r\n\r\n**iOS(Unified) project**\r\n\r\n```\r\nios-unified\\Syncfusion.SfChart.iOS.dll \r\nios-unified\\Syncfusion.SfChart.xForms.iOS.dll\r\nios-unified\\Syncfusion.SfChart.XForm.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nwp8\\Syncfusion.SfChart.WP8.dll\r\nwp8\\Syncfusion.SfChart.xForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Chart for Xamarin is compatible with Xamarin.Forms v1.2.3.6257.\r\n\r\nCurrently an additional step is required for configuring Windows Phone and iOS projects. We need to create an instance of the chart custom renderer as shown below.\r\n\r\nCreate an instance of SfChartRenderer in the MainPage constructor of the Windows Phone project as shown below\r\n\r\n```csharp\r\npublic MainPage()\r\n{\r\n\tnew SfChartRenderer();\r\n\t...  \r\n}\r\n```\r\n\r\nCreate an instance of SfChartRenderer in FinishedLaunching overridden method of AppDelegate class in the iOS Project as shown below\r\n\r\n```csharp\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n\tnew SfChartRenderer();\r\n\t...  \r\n}\r\n```\r\n\r\n**Adding and configuring the chart**\r\n\r\nThe chart control can be configured entirely in C# code or using XAML markup.\r\n\r\n1. Create an instance of SfChart\r\n2. Add the primary and secondary axis for the chart as shown below.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nSfChart chart = new SfChart ();\r\n\r\n//Initializing Primary Axis   \r\nCategoryAxisprimaryAxis=newCategoryAxis();\r\nprimaryAxis.Title=newChartAxisTitle(){Text=\"Month\"};\r\nchart.PrimaryAxis=primaryAxis;\r\n\r\n//Initializing Secondary Axis\r\nNumericalAxissecondaryAxis=newNumericalAxis();\r\nsecondaryAxis.Title=newChartAxisTitle(){Text=\"Temperature\"};\r\nchart.SecondaryAxis=secondaryAxis;\r\n\r\nthis.Content = chart;\r\n```\r\n\r\n**[XAML]** \r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003cchart:SfChart.PrimaryAxis\u003e\r\n\t\t\u003cchart:CategoryAxis\u003e\r\n\t\t\t\u003cchart:CategoryAxis.Title\u003e\r\n\t\t\t\t\u003cchart:ChartAxisTitle Text=\"Month\"/\u003e\r\n\t\t\t\u003c/chart:CategoryAxis.Title\u003e\r\n\t\t\u003c/chart:CategoryAxis\u003e\r\n\t\u003c/chart:SfChart.PrimaryAxis\u003e\r\n\r\n\t\u003cchart:SfChart.SecondaryAxis\u003e\r\n\t\t\u003cchart:NumericalAxis\u003e\r\n\t\t\t\u003cchart:NumericalAxis\u003e\r\n\t\t\t\t\u003cchart:ChartAxisTitle Text=\"Month\"/\u003e\r\n\t\t\t\u003c/chart:NumericalAxis\u003e\r\n\t\t\u003c/chart:NumericalAxis\u003e\r\n\t\u003c/chart:SfChart.SecondaryAxis\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\nA title for the chart is set using the Title property as shown below,\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nchart.Title=newChartTitle(){Text=\"WeatherAnalysis\"};\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003cchart:SfChart.Title\u003e\r\n\t\t\u003cchart:ChartTitle Text=\"Weather Analysis\"/\u003e\r\n\t\u003c/chart:SfChart.Title\u003e\r\n\t\u003c!-- ... --\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\n**Add Chart series**\r\n\r\nIn this sample we will be visualizing the temperature over the months using a Column Series. Before creating the series, let\u0027s create a data model representing the climate details data.\r\n\r\nIn SfChart, the series itemsource needs to be a collection of _ChartDataPoint_ objects. Add the following class for generating the datapoints.\r\n\r\n```csharp\r\npublicclassDataModel\r\n{\r\n\tpublicObservableCollectionHighTemperature;\r\n\r\n\tpublicDataModel()\r\n\t{\r\n\t\tHighTemperature=newObservableCollection();\r\n\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Jan\",42));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Feb\",44));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Mar\",53));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Apr\",64));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"May\",75));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Jun\",83));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Jul\",87));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Aug\",84));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Sep\",78));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Oct\",67));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Nov\",55));\r\n\t\tHighTemperature.Add(newChartDataPoint(\"Dec\",45));\r\n\t}\r\n}    \r\n```\r\n   \r\n\r\nNow add the series to the chart and set its ItemsSource as shown below\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n//Adding the series to the chart\r\n\r\nchart.Series.Add(newColumnSeries(){\r\n\tItemsSource=dataModel.HighTemperature\r\n});\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003c!-- ... --\u003e\t\r\n\t\u003cchart:SfChart.Series\u003e\r\n\t\t\u003cchart:ColumnSeries ItemsSource = \"{Binding HighTemperature}\"/\u003e\t\t\t\t\r\n\t\u003c/chart:SfChart.Series\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\t\r\n**Adding Legends**\r\n\r\nLegends can be enabled in SfChart by initializing the _Legend_ property with _ChartLegend_ instance as shown below\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n    //Adding Legend\r\n    chart.Legend=newChartLegend();\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003cchart:SfChart.Legend\u003e\r\n\t\t\u003cchart:ChartLegend/\u003e\r\n\t\u003c/chart:SfChart.Legend\u003e\r\n\t\u003c!-- ... --\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\nCircular legend icons will be displayed for each series by default. Next, we need to provide the labels for the series using the Label property, this information will be displayed along the legend icon.\r\n\r\nThe next step is to add the HighTemperature column series as shown below\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n//Adding the column series to the chart\r\nchart.Series.Add(newColumnSeries(){ItemsSource=dataModel.HighTemperature,\r\n\tLabel=\"Series1\"\r\n});\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003c!-- ... --\u003e\r\n\t\u003cchart:SfChart.Series\u003e\r\n\t\t\u003cchart:ColumnSeries Label = \"Series 1\" ItemsSource =\r\n\t\t\t\"{Binding HighTemperature}\"/\u003e\r\n\t\u003c/chart:SfChart.Series\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\n**Adding multiple series to the chart**\r\n\r\nSo far we have visualized just the high temperature data over time. Now let\u0027s visualize other data such as low temperature and precipitation.\r\n\r\nLet\u0027s add two _SplineSeries_ for displaying high and low temperatures and a _ColumnSeries_ for displaying the precipitation as shown below\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nDataModeldataModel=newDataModel();\r\n\r\n//Adding Column Series to the chart for displaying precipitation\r\nchart.Series.Add(newColumnSeries(){\r\n\tItemsSource=dataModel.Precipitation,\r\n\tLabel=\"Precipitation\"\r\n});\r\n\r\n//Adding the Spline Series to the chart for displaying high temperature\r\nchart.Series.Add(newSplineSeries(){\r\n\tItemsSource=dataModel.HighTemperature,\r\n\tLabel=\"High\"\r\n});\r\n\r\n//Adding the Spline Series to the chart for displaying low temperature\r\nchart.Series.Add(newSplineSeries(){\r\n\tItemsSource=dataModel.LowTemperature,\r\n\tLabel=\"Low\"\r\n});\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003c!-- ... --\u003e\t\r\n\t\u003cchart:SfChart.Series\u003e\r\n\t\t\u003cchart:ColumnSeries   Label = \"Low\" ItemsSource =\r\n\t\t\t\"{Binding Precipitation}\"/\u003e\r\n\t\t\u003cchart:SplineSeries  Label = \"High\" ItemsSource =\r\n\t\t\t\"{Binding HighTemperature}\"/\u003e\r\n\t\t\u003cchart:SplineSeries  Label = \"Low\" ItemsSource =\r\n\t\t\t\"{Binding LowTemperature}\"/\u003e\r\n\t\u003c/chart:SfChart.Series\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\nCurrently all the data is plotted against a single scale but the precipitation data needs to be plotted against a different scale.\r\n\r\n**Adding multiple Y-axis**\r\n\r\nLet\u0027s add a secondary axis(y axis) to the chart as shown below\r\n\r\n**[C#]**\r\n\t\r\n```csharp\r\n//Adding Column Series to the chart for displaying precipitation\r\nchart.Series.Add(newColumnSeries(){\r\n\tItemsSource=dataModel.Precipitation,\r\n\tLabel=\"Precipitation\",\r\n\tYAxis=newNumericalAxis(){OpposedPosition=true}\r\n);\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\t\u003cchart:SfChart\u003e\r\n\t\u003c!-- ... --\u003e\r\n\t\u003cchart:ColumnSeries   Label = \"Low\" ItemsSource =\r\n\t\t\"{Binding Precipitation}\"\u003e\r\n\t\t\u003cchart:ColumnSeries.YAxis\u003e\r\n\t\t\t\u003cchart:NumericalAxis OpposedPosition =\"true\"/\u003e\r\n\t\t\u003c/chart:ColumnSeries.YAxis\u003e\r\n\t\u003c/chart:ColumnSeries\u003e\r\n\t\u003c!-- ... --\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\r\nThe _OpposedPostion_ has been set to true to place the secondary axis on the opposite side.\r\n\r\nHere is the complete code snippet for creating the chart\r\n\r\n**[C#]**\r\n\r\n```csharp\r\npublic class WeatherChartDemo:ContentPage\r\n{\r\n\tpublic WeatherChartDemo()\r\n\t{\r\n\t\t//Initializing chart\r\n\t\tSfChartchart=newSfChart();\r\n\t\tchart.Title=newChartTitle(){Text=\"WeatherAnalysis\"};\r\n\r\n\t\t//Initializing Primary Axis\r\n\t\tCategoryAxisprimaryAxis=newCategoryAxis();\r\n\t\tprimaryAxis.Title=newChartAxisTitle(){Text=\"Month\"};\r\n\t\tchart.PrimaryAxis=primaryAxis;\r\n\r\n\t\t//Initializing Secondary Axis\r\n\t\tNumericalAxissecondaryAxis=newNumericalAxis();\r\n\t\tsecondaryAxis.Title=newChartAxisTitle(){Text=\"Temperature\"};\r\n\t\tchart.SecondaryAxis=secondaryAxis;\r\n\t\tDataModeldataModel=newDataModel();\r\n\r\n\t\t//Adding Column Series to the chart for displaying precipitation\r\n\t\tchart.Series.Add(newColumnSeries(){\r\n\t\t\tItemsSource=dataModel.Precipitation,\r\n\t\t\tLabel=\"Precipitation\",\r\n\t\t\tYAxis=newNumericalAxis(){OpposedPosition=true,\r\n\t\t\tShowMajorGridLines = false}\r\n\t\t});\r\n\r\n\t\t//Adding the Spline Series to the chart for displaying high temperature\r\n\t\tchart.Series.Add(newSplineSeries(){\r\n\t\t\tItemsSource=dataModel.HighTemperature,\r\n\t\t\tLabel=\"High\"\r\n\t\t});\r\n\r\n\t\t//Adding the Spline Series to the chart for displaying low temperature\r\n\t\tchart.Series.Add(newSplineSeries(){\r\n\t\t\tItemsSource=dataModel.LowTemperature,\r\n\t\t\tLabel=\"Low\"\r\n\t\t});\r\n\r\n\t\t//Adding Chart Legend for the Chart\r\n\t\t\tchart.Legend=newChartLegend();\r\n\t\t\this.Content=chart;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class DataModel\r\n\t{\r\n\t\tpublic ObservableCollectionHighTemperature;\r\n\t\tpublic ObservableCollectionLowTemperature;\r\n\t\tpublic ObservableCollectionPrecipitation;\r\n\r\n\t\tpublic DataModel()\r\n\t\t{\r\n\t\t\tHighTemperature=newObservableCollection();\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Jan\",42));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Feb\",44));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Mar\",53));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Apr\",64));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"May\",75));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Jun\",83));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Jul\",87));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Aug\",84));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Sep\",78));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Oct\",67));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Nov\",55));\r\n\t\t\tHighTemperature.Add(newChartDataPoint(\"Dec\",45));\r\n\r\n\t\t\tLowTemperature=newObservableCollection();\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Jan\",27));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Feb\",28));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Mar\",35));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Apr\",44));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"May\",54));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Jun\",63));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Jul\",68));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Aug\",66));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Sep\",59));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Oct\",48));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Nov\",38));\r\n\t\t\tLowTemperature.Add(newChartDataPoint(\"Dec\",29));\r\n\r\n\t\t\tPrecipitation=newObservableCollection();\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Jan\",3.03));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Feb\",2.48));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Mar\",3.23));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Apr\",3.15));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"May\",4.13));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Jun\",3.23));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Jul\",4.13));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Aug\",4.88));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Sep\",3.82));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Oct\",3.07));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Nov\",2.83));\r\n\t\t\tPrecipitation.Add(newChartDataPoint(\"Dec\",2.8));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cchart:SfChart\u003e\r\n\t\u003cchart:SfChart.Legend\u003e\r\n\t\t\u003cchart:ChartLegend/\u003e\r\n\t\u003c/chart:SfChart.Legend\u003e\r\n\r\n\t\u003cchart:SfChart.Title\u003e\r\n\t\t\u003cchart:ChartTitle Text=\"Weather Analysis\"/\u003e\r\n\t\u003c/chart:SfChart.Title\u003e\r\n\r\n\t\u003cchart:SfChart.PrimaryAxis\u003e\r\n\t\t\u003cchart:CategoryAxis\u003e\r\n\t\t\t\u003cchart:CategoryAxis.Title\u003e\r\n\t\t\t\t\u003cchart:ChartAxisTitle Text=\"Month\"/\u003e\r\n\t\t\t\u003c/chart:CategoryAxis.Title\u003e\r\n\t\t\u003c/chart:CategoryAxis\u003e\r\n\t\u003c/chart:SfChart.PrimaryAxis\u003e\r\n\t\u003cchart:SfChart.SecondaryAxis\u003e\r\n\t\t\u003cchart:NumericalAxis\u003e\r\n\t\t\t\u003cchart:NumericalAxis.Title\u003e\r\n\t\t\t\t\u003cchart:ChartAxisTitle Text=\"Month\"/\u003e\r\n\t\t\t\u003c/chart:NumericalAxis.Title\u003e\r\n\t\t\u003c/chart:NumericalAxis\u003e\r\n\t\u003c/chart:SfChart.SecondaryAxis\u003e\r\n\r\n\t\u003cchart:SfChart.Series\u003e\r\n\t\t\u003cchart:ColumnSeries   Label = \"Low\" ItemsSource = \"{Binding Precipitation}\"\u003e\r\n\t\t\t\u003cchart:ColumnSeries.YAxis\u003e\r\n\t\t\t\t\u003cchart:NumericalAxis OpposedPosition=\"true\"\r\n\t\t\t\t\tShowMajorGridLines=\"false\"/\u003e\r\n\t\t\t\u003c/chart:ColumnSeries.YAxis\u003e\r\n\t\t\u003c/chart:ColumnSeries\u003e\r\n\t\t\u003cchart:SplineSeries  Label = \"High\" ItemsSource =\r\n\t\t\t\"{Binding HighTemperature}\"/\u003e\r\n\t\t\u003cchart:SplineSeries  Label = \"Low\" ItemsSource =\r\n\t\t\t\"{Binding LowTemperature}\"/\u003e\r\n\t\u003c/chart:SfChart.Series\u003e\r\n\u003c/chart:SfChart\u003e\r\n```\r\n\t\r\n\r\n\r\n#\u003ca id=\"Gauge\"\u003e\u003c/a\u003eGauge\r\n\r\n**Introduction**\r\n\r\nThis section provides a quick overview for working with Essential Gauge for Xamarin.Forms. We will walk through the entire process of configuring a real world gauge.\r\nYou can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.1.0.21/Samples/Xamarin/Gauge_GettingStarted.zip).\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nIf you had acquired Essential Studio components through the Xamarin component store interface from within your IDE, then after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component manager,  you will still need to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL project in your solution. You can do this by manually adding the relevant PCL assembly references to your PCL project contained in the following path inside of your solution folder  \r\n\r\n```\r\nComponents/syncfusionessentialstudio-version/lib/pcl/\r\n```\r\n\r\nAlternatively if you had downloaded Essential Studio from Syncfusion.com or through the Xamarin store web interface then all assembly references need to be added manually.  \r\n\r\nAfter installing Essential Studio for Xamarin, all the required assemblies can be found in the installation folders, typically\r\n\t\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\nor after downloading through the Xamarin store web interface, all the required assemblies can be found in the below folder\r\n\r\n**{download location}\\syncfusionessentialstudio-version\\lib**\r\n\r\nYou can then add the assembly references to the respective projects as shown below\r\n\r\n**PCL project**\r\n\r\n```\r\npcl\\Syncfusion.SfGauge.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nandroid\\Syncfusion.SfGauge.Android.dll\r\nandroid\\Syncfusion.SfGauge.XForms.Android.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\nios\\Syncfusion.SfGauge.iOS.dll \r\nios\\Syncfusion.SfGauge.XForms.iOS.dll\r\nios\\Syncfusion.SfGauge.XForms.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nwp8\\Syncfusion.SfGauge.WP8.dll\r\nwp8\\Syncfusion.SfGauge.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Gauge for Xamarin is compatible with Xamarin.Forms v1.2.3.6257.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Gauge custom renderer as shown below.\r\n\r\nCreate an instance of SfGaugeRenderer in the MainPage constructor of the Windows Phone project as shown below\r\n\r\n```csharp\r\npublic MainPage()\r\n{\r\n\tnew SfGaugeRenderer ();\r\n\t...  \r\n}\r\n```\r\n\r\nCreate an instance of SfGaugeRenderer in the FinishedLaunching overridden method of the AppDelegate class in the iOS Project as shown below\r\n\r\n```csharp\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n\t...\r\n\tnew SfGaugeRenderer ();\r\n\t...\r\n}\r\n```\r\n\r\n**Adding and configuring the gauge**\r\n\r\nThe gauge control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfCircularGauge\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n   SfCircularGauge circularGauge = new SfCircularGauge();\r\n\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=http://xamarin.com/schemas/2014/forms\r\n\txmlns:local=\"clr-\r\n\tnamespace:Syncfusion.SfGauge.XForms;assembly=Syncfusion.SfGauge.XForms\"\r\n\txmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\r\n\tx:Class=\"GaugeGettingStarted.Sample\"\u003e\r\n\t\u003cContentPage.Content\u003e\r\n\t\t\u003clocal:SfCircularGauge\u003e\r\n\t\t\u003c/local:SfCircularGauge\u003e\r\n\t\u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\t\r\n**Insert a Scale**\r\n\r\nThe next step is to add one of more scales.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nSfCircularGauge circularGauge = new SfCircularGauge();\r\n\r\n// Add a scale\r\n\r\nScale scale = new Scale();\r\nscale.StartValue= 0;\r\nscale.EndValue =100;\r\nscale.Interval = 10;\r\nscale.StartAngle =135;\r\nscale.SweepAngle =270;\r\nscale.RimThickness = 10;\r\nscale.RimColor = Color.FromHex(\"#FFFB0101\");\r\nscale.MinorTicksPerInterval = 3;\r\n\r\ncircularGauge.Scales.Add(scale);\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cgauge:SfCircularGauge\u003e\r\n\t\u003cgauge.SfCircularGauge.Scales\u003e\r\n\t\t\u003cgauge.Scale StartValue=\"0\"\r\n\t\t\tEndValue=\"100\" Interval=\"10\"\r\n\t\t\tStartAngle=\"135\" SweepAngle=\"230\"\r\n\t\t\tRimColor=\"#FFFB0101\" RimThickness=\"10\"  /\u003e\r\n\t\u003c/gauge.SfCircularGauge.Scales\u003e\r\n\u003c/gauge:SfCircularGauge\u003e\r\n```\r\n\r\n**Specify Ranges**\r\n\r\nWe can improve the readability of data by including ranges that quickly show when values fall within specific ranges.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n... \r\nRange range = new Range();\r\nrange.StartValue = 0;\r\nrange.EndValue = 80;\r\nrange.Color = Color.FromHex(\"#FF777777\");\r\nrange.Thickness = 10;\r\n\r\nscale.Ranges.Add(range);\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfCircularGauge\u003e\r\n\t\u003clocal:SfCircularLocal:Scales\u003e\r\n\t\t\u003clocal:Scale StartValue=\"0\" EndValue=\"100\"\r\n\t\t\tInterval=\"10\" StartAngle=\"135\"\r\n\t\t\tSweepAngle=\"230\" RimColor=\"#FFFB0101\"\r\n\t\t\tRimThickness=\"10\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"80\" Color=\"#FF777777\" Thickness=\"15\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfCircularLocal:Scales\u003e\r\n\u003c/local:SfCircularGauge\u003e\r\n```\r\n\r\n**Add a Needle Pointer**\r\n\r\nWe will now create a needle pointer and associate it with a scale to display the current value.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nNeedlePointer needlePointer = new NeedlePointer();\r\nneedlePointer.Value = 60;\r\nneedlePointer.Color = Color.White;\r\nneedlePointer.KnobColor = Color.White;\r\nneedlePointer.Thickness = 5;\r\nneedlePointer.KnobRadius = 20;\r\nneedlePointer.LengthFactor = 0.8;\r\n\r\nscale.Pointers.Add(needlePointer);\r\n...\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfCircularGauge\u003e\r\n\t\u003clocal:SfCircularLocal:Scales\u003e\r\n\t\t\u003clocal:Scale StartValue=\"0\" EndValue=\"100\"\r\n\t\t\tInterval=\"10\" StartAngle=\"135\"\r\n\t\t\tSweepAngle=\"230\" RimColor=\"#FFFB0101\"\r\n\t\t\tRimThickness=\"10\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"80\" Color=\"#FF777777\" Thickness=\"15\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\t\u003clocal:Scale.Pointers\u003e\r\n\t\t\t\t\u003clocal:NeedlePointer Value=\"60\" LengthFactor=\"0.8\"\r\n\t\t\t\t\tColor=\"White\" Thickness=\"5\"\r\n\t\t\t\t\tKnobColor=\"White\" KnobRadius=\"20\"  /\u003e\r\n\t\t\t\u003c/local:Scale.Pointers\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfCircularLocal:Scales\u003e\r\n\u003c/local:SfCircularGauge\u003e\r\n```\r\n\r\n**Add a Range Pointer**\r\n\r\nA range pointer provides an alternative way of indicating the current value.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nRangePointer rangePointer = new RangePointer();\r\nrangePointer.Value = 60;\r\nrangePointer.Color = Color.FromHex(\"#FFA9A9A9\");\r\nrangePointer.Thickness = 10;\r\n\r\nscale.Pointers.Add(rangePointer);\r\n...\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfCircularGauge\u003e\r\n\t\u003clocal:SfCircularLocal:Scales\u003e\r\n\t\t\u003clocal:Scale StartValue=\"0\" EndValue=\"100\"\r\n\t\t\tInterval=\"10\" StartAngle=\"135\"\r\n\t\t\tSweepAngle=\"230\" RimColor=\"#FFFB0101\"\r\n\t\t\tRimThickness=\"10\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"80\" Color=\"#FF777777\" Thickness=\"15\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\t\u003clocal:Scale.Pointers\u003e\r\n\t\t\t\t\u003clocal:NeedlePointer Value=\"60\" LengthFactor=\"0.8\"\r\n\t\t\t\t\tColor=\"White\" Thickness=\"5\"\r\n\t\t\t\t\tKnobColor=\"White\" KnobRadius=\"20\"  /\u003e\r\n\t\t\t\t\u003clocal:RangePointer Value=\"60\" Color=\"White\"\r\n\t\t\t\t\t\tThickness=\"10\" /\u003e\r\n\t\t\t\u003c/local:Scale.Pointers\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfCircularLocal:Scales\u003e\r\n\u003c/local:SfCircularGauge\u003e\r\n```\r\n\r\n\r\n\r\n#\u003ca id=\"DigitalGauge\"\u003e\u003c/a\u003eDigital Gauge\r\n\r\n**Introduction**\r\n\r\nEssential Digital Gauge for Xamarin.Forms lets you visualize alpha and numeric values over a digital gauge frame. The appearance of the digital gauge can be fully customized to seamlessly integrate with your applications.\r\n\r\nThis section provides a quick overview for working with Essential Digital Gauge for Xamarin.Forms. We will walk through the entire process of creating a real world Digital gauge.\r\n\r\n## Adding Syncfusion assembly reference\r\n\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfGauge.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion. SfGauge.Andriod.dll\r\nAndroid\\Syncfusion.SfGauge.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfGauge.iOS.dll \r\niOS\\Syncfusion.SfGauge.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfGauge.WP8.dll\r\nWinPhone\\Syncfusion SfGauge.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Digital Gauge for Xamarin is compatible with Xamarin Forms 1.2.2.0.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Digital Gauge custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfDigitalGaugeRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfDigitalGaugeRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfDigitalGaugeRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfDigitalGaugeRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n\r\n**Adding and configuring the DigitalGauge**\r\n\r\nThe digitalgauge control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfDigitalrGauge\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n_//We have to update App.cs source this file._\r\nusingSyncfusion.SfGauge.XForms;\r\nusingSystem;  \r\nusingSystem.Collections.Generic;  \r\nusingSystem.Linq;  \r\nusingSystem.Text;  \r\nusingXamarin.Forms;  \r\nusingSystem.Collections.ObjectModel;publicstaticPage GetMainPage(){         SfDigitalGauge digitalGauge = newSfDigitalGauge();   returnnewContentPage   {       Content = digitalGauge,   };} \r\n\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n_//we have to use this this in App.CS source.//publicstaticPage GetMainPage()//{//    return Sample();//}\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e_\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"  \r\n\txmlns:local=\"clr-namespace:Syncfusion.XForms.SfGauge; assembly=Syncfusion..XForms.SfGauge \"  \r\n\txmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"x:Class=\"DigitalGaugeGettingStarted.Sample\"\u003e\r\n\t\u003cContentPage.Content\u003e  \r\n\t\t\u003clocal:SfDigitalGauge\u003e \r\n\t\t\u003c/local:SfDigitalGauge\u003e\r\n\t\u003c/ContentPage.Content\u003e  \r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n## Configure the Digital Gauge Properties\r\n\r\nThe next step is to add Digital Gauge properties in application/\r\n\r\n**[C#]**\r\n\r\n```charp\r\nSfDigitalGauge DigitalGauge = newSfDigitalGauge();\r\ndigitalGauge1.Value = \"SYNCFUSION\";\r\ndigitalGauge1.CharacterType = CharacterType.SegmentSeven;\r\ndigitalGauge1.CharacterHeight = 58;\r\ndigitalGauge1.CharacterWidth= 29;digitalGauge1.SegmentThickness = 3;\r\ndigitalGauge1.DisabledColorOpacity = 30;\r\ndigitalGauge1.BackgroundColor = Color.FromRgb (235, 235, 235);\r\ndigitalGauge1.CharacterForeColor = Color.FromRgb (20,108,237);\r\ndigitalGauge1.CharacterDisabledColor = Color.FromRgb (20,108,237); \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cdigitalGauge1:SfDigitalGauge Value=\"SYNCFUSION\" CharacterHeight=\"58\" CharacterWidth =\"29\" SegmentThickness=\"3\" DisabledColorOpacity=\"30\" BackgroundColor=\"#EBEBEB\" CharacterType= CharacterType.SegmentSeven        CharacterForeColor =\"#146CED\" CharacterDisabledColor =\"#146CED\"\u003e \r\n\u003c/digitalGauge1:SfDigitalGauge \u003e\r\n```\r\n\r\n\r\n\r\n#\u003ca id=\"LinearGauge\"\u003e\u003c/a\u003eLinear Gauge\r\n\r\n**Introduction**\r\n\r\nEssential Linear Gauge for Xamarin.Forms lets you visualize values on a linear scale. The appearance of the linear gauge can be fully customized to seamlessly integrate with your applications.\r\n\r\nThis section provides a quick overview for working with Essential Linear Gauge for Xamarin.Forms. We will walk through the entire process of creating a real world gauge.\r\n\r\n## Adding Syncfusion assembly reference\r\n\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfGauge.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion.SfGauge.Andriod.dll\r\nAndroid\\Syncfusion.SfGauge.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfGauge.iOS.dll \r\niOS\\Syncfusion.SfGauge.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion SfGauge.WP8.dll\r\nWinPhone\\Syncfusion SfGauge.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Linear Gauge for Xamarin is compatible with Xamarin Forms 1.2.2.0.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Linear Gauge custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfLinearGaugeRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfLinearGaugeRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfLinearGaugeRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfLinearGaugeRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n\r\n**Adding and configuring the gauge**\r\n\r\nThe Linear gauge control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfLinearGauge\r\n\r\n**[C#]**\r\n\r\n```charp\r\n_// We have to update App.cs source this file._\r\nusingSyncfusion.SfGauge.XForms;  \r\nusingSystem;  \r\nusingSystem.Collections.Generic;  \r\nusingSystem.Linq;  \r\nusingSystem.Text;  \r\nusingXamarin.Forms;  \r\nusingSystem.Collections.ObjectModel;\r\npublicstaticPage GetMainPage()\r\n{\r\nSfLinearGauge linearGauge = newSfLinearGauge();\r\nreturnnewContentPage {Content = linearGauge,};\r\n} \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n_//we have to use this this in App.CS source.**//publicstaticPage GetMainPage()//{//    return Sample();//}\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e_\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"  \r\n\txmlns:local=\"clr-namespace:Syncfusion.XForms.SfGauge;assembly=Syncfusion.XForms.SfGauge \"  \r\n\txmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"x:Class=\"LinearGaugeGettingStarted.Sample\"\u003e\r\n\t\u003cContentPage.Content\u003e  \r\n\t\t\u003clocal:SfLinearGauge\u003e \r\n\t\t\u003c/local:SfLinearGauge\u003e\r\n\t\u003c/ContentPage.Content\u003e  \r\n\u003c/ContentPage\u003e \r\n```\r\n\r\n## Insert a Scale\r\n\r\nThe next step is to add one of more scales.\r\n\r\n**[C#]**\r\n\r\n```charp\r\nlinearGauge=newSfLinearGauge();  \r\nlinearGauge.BackgroundColor=Color.White;  \r\nlinearGauge.Orientation=Orientation.OrientationVertical;  \r\n_//Scale_  \r\nObservableCollection\u003cLinearScale\u003escales=newObservableCollection\u003cLinearScale\u003e();  \r\nLinearScalescale=newLinearScale();  \r\nscale.MinimumValue=0;  \r\nscale.MaximumValue=100;  \r\nscale.Interval=20;  \r\nscale.ScaleBarLength=100;  \r\nscale.ScaleBarColor=Color.FromRgb(250,236,236);  \r\nscale.LabelColor=Color.FromRgb(84,84,84);  \r\nscale.MinorTicksPerInterval=1;  \r\nscale.ScaleBarSize=13;  \r\nscale.ScalePosition=ScalePosition.BackWard;  \r\n. . .   \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cgauge:SflinearGauge\u003e\r\n\t\u003cgauge.SfLinearGauge.Scales\u003e\r\n\t\t\u003cgauge.ScaleMinimumValue=\"0\" MaximumValue=\"100\"ScaleBarLength=\"100\" LablePostfix=\"%\"ScaleBarColor=\"230\" ScaleBarColor=\"#EDEDED\"LableColor=\"#545454\" MinorTicksPerInterval=\"1\" ScaleBarSize=\"13\" /\u003e\r\n\t\u003c/gauge.SfLinearGauge.Scales\u003e \r\n\u003c/gauge:SfLinearGauge\u003e\r\n```\r\n\r\n## Specify Range\r\n\r\nWe can improve the readability of data by including ranges that quickly show when values fall within specific ranges.\r\n\r\n**[C#]**\r\n\r\n```charp\r\n_//Range_  \r\nLinearRangerange=newLinearRange();  \r\nrange.StartValue=0;  \r\nrange.EndValue=50;  \r\nrange.Color=Color.FromRgb(234,248,249);  \r\nrange.StartWidth=10;  \r\nrange.EndWidth=10;  \r\nrange.Offset=-0.17;  \r\nscale.Ranges.Add(range);\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfLinearGauge\u003e\r\n\t\u003clocal:SfLinearGauge:Scales\u003e\r\n\t\t\u003clocal:ScaleMinimumValue=\"0\" MaximumValue=\"100\"ScaleBarLength=\"100\" LablePostfix=\"%\"ScaleBarColor=\"230\" ScaleBarColor=\"#EDEDED\"LableColor=\"#545454\" MinorTicksPerInterval=\"1\" ScaleBarSize=\"20\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"50\" Color=\"#3288C6\" Offset=\"-0.3\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfLinearGauge:Scales\u003e\r\n\u003c/local:SfLinearGauge\u003e \r\n```\r\n\r\n## Add a Pointer\r\n\r\nWe will now create a pointer and associate it with a scale.\r\n\r\n**[C#]**\r\n\r\n```charp\r\nList\u003cLinearPointer\u003epointers=newList\u003cLinearPointer\u003e();  \r\n_//SymbolPointer_  \r\nSymbolPointersymbolPointer=newSymbolPointer();  \r\nsymbolPointer.Value=50;  \r\nsymbolPointer.Offset=0.0;  \r\nsymbolPointer.Thickness=3;  \r\nsymbolPointer.Color=Color.FromRgb(65,77,79);  \r\n  \r\n_//BarPointer_  \r\nBarPointerrangePointer=newBarPointer();  \r\nrangePointer.Value=50;  \r\nrangePointer.Color=Color.FromRgb(206,69,69);  \r\nrangePointer.Thickness=10;  \r\npointers.Add(symbolPointer);  \r\npointers.Add(rangePointer);  \r\n... scale.Pointers=pointers;  \r\nscales.Add(scale);  \r\nlinearGauge.Scales=scales;\r\n...\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfLinearGauge\u003e\r\n\t\u003clocal:SflinearGauge:Scales\u003e\r\n\t\t\u003clocal:Scale MinimumValue=\"0\" MaximumValue=\"100\" ScaleBarLength=\"100\" LablePostfix=\"%\"ScaleBarColor=\"230\" ScaleBarColor=\"#EDEDED\" LableColor=\"#545454\" MinorTicksPerInterval=\"1\" ScaleBarSize=\"20\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"50\" Color=\"#3288C6\"Offset=\"-0.3\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\t\u003clocal:Scale.Pointers\u003e\r\n\t\t\t\t\u003clocal:SymbolPointer Value=\"50\" Color=\"Red\" Offset=\"0.3\" /\u003e\r\n\t\t\t\t\u003clocal:BarPointerValue=\"50\" Color=\"White\"/\u003e\r\n\t\t\t\u003c/local:Scale.Pointers\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfLinearGauge:Scales\u003e\r\n\u003c/local:SfLinearGauge \u003e\r\n```\r\n\r\n## Add a Minor and Major Ticksettings\r\n\r\nA minor and major ricksettings provides a way of indicating the current value.\r\n\r\n**[C#]**\r\n\r\n```charp\r\n_//MinorTickssetting_  \r\nLinearTickSettingsminor=newLinearTickSettings();  \r\nminor.Length=10;  \r\nminor.Color=Color.FromRgb(175,175,175);  \r\nminor.Thickness=1;  \r\nscale.MinorTickSettings=minor;  \r\n  \r\n_//MajorTickssetting_  \r\nLinearTickSettingsmajor=newLinearTickSettings();  \r\nmajor.Length=10;  \r\nmajor.Color=Color.FromRgb(175,175,175);  \r\nmajor.Thickness=1;  \r\nscale.MajorTickSettings=major;  \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfLinearGauge\u003e\r\n\t\u003clocal:SfLinearGauge:Scales\u003e\r\n\t\t\u003clocal:Scale MinimumValue=\"0\" MaximumValue=\"100\" ScaleBarLength=\"100\" LablePostfix=\"%\" ScaleBarColor=\"230\" ScaleBarColor=\"#EDEDED\" LableColor=\"#545454\" MinorTicksPerInterval=\"1\" ScaleBarSize=\"20\" \u003e\r\n\t\t\t\u003clocal:Scale.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range StartValue=\"0\" EndValue=\"50\" Color=\"#3288C6\" Offset=\"-0.3\" /\u003e\r\n\t\t\t\u003c/local:Scale.Ranges\u003e\r\n\t\t\t\u003clocal:Scale.Pointers\u003e\r\n\t\t\t\t\u003clocal:SymbolPointer Value=\"50\" Color=\"Red\" Offset=\"0.3\" /\u003e\r\n\t\t\t\t\u003clocal:BarPointer Value=\"50\" Color=\"White\"/\u003e\r\n\t\t\t\u003c/local:Scale.Pointers\u003e\r\n\t\t\t\u003clocal:Scale.MinorTickSettings\u003e\r\n\t\t\t\t\u003clocal:LinearTickSettings Length=\"10\" Color=\"#4B4B4B\" Thickness=\"1\" /\u003e\r\n\t\t\t\u003c/local:Scale.MinorTickSettings\u003e\r\n\t\t\t\u003clocal:Scale.MajorTickSettings\u003e\r\n\t\t\t\t\u003clocal:LinearTickSettings Length=\"10\" Color=\"#4B4B4B\" Thickness=\"1\" /\u003e\r\n\t\t\t\u003c/local:Scale.MajorTickSettings\u003e\r\n\t\t\u003c/local:Scale\u003e\r\n\t\u003c/local:SfLinearGauge:Scales\u003e\r\n\u003c/local:SfLinearGauge\u003e\r\n```\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"TreeMap\"\u003e\u003c/a\u003eTreeMap\r\n\r\n**Overview**\r\n\r\nThis section provides a quick overview for working with Essential Treemap for Xamarin.Forms. We will walk through the entire process of creating a real world Treemap.\r\n\r\nThe goal of this tutorial is to visualize population growth across continents.\r\nYou can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.1.0.21/Samples/Xamarin/TreeMap_GettingStarted.zip).\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nIf you had acquired Essential Studio components through the Xamarin component store interface from within your IDE, then after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component manager,  you will still need to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL project in your solution. You can do this by manually adding the relevant PCL assembly references to your PCL project contained in the following path inside of your solution folder  \r\n\r\n```\r\nComponents/syncfusionessentialstudio-version/lib/pcl/\r\n```\r\n\r\nAlternatively if you had downloaded Essential Studio from Syncfusion.com or through the Xamarin store web interface then all assembly references need to be added manually.  \r\n\r\nAfter installing Essential Studio for Xamarin, all the required assemblies can be found in the installation folders, typically\r\n\t\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\nor after downloading through the Xamarin store web interface, all the required assemblies can be found in the below folder\r\n\r\n**{download location}\\syncfusionessentialstudio-version\\lib**\r\n\r\nYou can then add the assembly references to the respective projects as shown below\r\n\r\n**PCL project**\r\n\r\n```\r\npcl\\Syncfusion.SfTreeMap.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nandroid\\Syncfusion.SfTreeMap.Android.dll\r\nandroid\\Syncfusion.SfTreeMap. XForms.Android.dll\r\n```\r\n\r\n**iOS project**\r\n```\r\nios\\Syncfusion.SfTreeMap.iOS.dll \r\nios\\Syncfusion.SfTreeMap.XForms.iOS.dll\r\nios\\Syncfusion.SfTreeMap.XForms.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nwp8\\Syncfusion.SfTreeMap.WP8.dll\r\nwp8\\Syncfusion.SfTreeMap.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential TreeMap for Xamarin is compatible with Xamarin.Forms v1.2.3.6257.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the TreeMap custom renderer as shown below.\r\n\r\nCreate an instance of SfTreeMapRenderer in the MainPage constructor of the Windows Phone project as shown below\r\n\r\n```csharp\r\npublic MainPage()\r\n{\r\n\tnew SfTreeMapRenderer ();\r\n     ...  \r\n}\r\n```\r\n\r\nCreate an instance of SfTreeMapRenderer in the FinishedLaunching overridden method of the AppDelegate class in iOS Project as shown below\r\n\r\n```csharp\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n\tnew SfTreeMapRenderer ();\r\n\t...  \r\n}\r\n```\r\n\r\n**Initializing the TreeMap**\r\n\r\nThe Treemap control can be configured entirely in C# code or using XAML markup.\r\n\r\nThe first step is to create a TreeMap object\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=http://xamarin.com/schemas/2014/forms\r\nxmlns:local=\"clr-\r\nnamespace:Syncfusion.SfTreeMap.XForms;assembly=Syncfusion.SfTreeMap.XForms\"\r\nxmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\r\nx:Class=\"TreeMapGettingStarted.Sample\" BackgroundColor=îBlackî\u003e\r\n\t\u003cContentPage.Content \u003e\r\n\t\t\u003clocal:SfTreeMap x:Name=\"treeMap\"\u003e\r\n\t\t\u003c/local:SfTreeMap\u003e\r\n\t\u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n```csharp\r\npublic static Page GetMainPage()\r\n{\r\n        SfTreeMap treeMap = new SfTreeMap();\r\n        return new ContentPage {\r\n\t\tBackgroundColor = Color.Black,\r\n\t\tContent = treeMap,\r\n\t};\r\n}\r\n```\r\n\r\n**Populating TreeMap Items**\r\n\r\nThe TreeMap accepts a collection of TreeMapItems as input.\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// BindingContext is set for the content page class.\r\n// DataModel model = new DataModel();\r\n//..\r\n//..\r\n//this.BindingContext = model;\r\n\r\n\u003clocal:SfTreeMap x:Name=\"treeMap\" Items = \"{Binding TreeMapItems}\"\u003e\r\n\u003c/local:SfTreeMap\u003e    \r\n```\r\n\r\n**[C#]**\r\n```csharp\r\npublic class DataModel : BindableObject\r\n{\r\n\tpublic static readonly BindableProperty TreeMapItemsProperty =\r\n\t\tBindableProperty.Create\u003e(p =\u003e\r\n\t\t\tp.TreeMapItems, null, BindingMode.TwoWay, null, null, null, null);\r\n\r\n\tpublic ObservableCollection TreeMapItems\r\n\t{\r\n\t\tget { return (ObservableCollection)GetValue(TreeMapItemsProperty); }\r\n\t\tset { SetValue(TreeMapItemsProperty, value); }\r\n\t}\r\n\r\n\tpublic DataModel()\r\n\t{\r\n\t\tthis.TreeMapItems = new ObservableCollection();\r\n\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Indonesia\", ColorWeight = 3,Weight = 237641326 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Russia\", ColorWeight = 2, Weight = 152518015 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"United States\", ColorWeight = 4, Weight = 315645000 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Mexico\", ColorWeight = 2, Weight = 112336538 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Nigeria\", ColorWeight = 2, Weight = 170901000 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Egypt\", ColorWeight = 1, Weight = 83661000 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"Germany\", ColorWeight = 1, Weight = 81993000 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"France\", ColorWeight = 1, Weight = 65605000 });\r\n\t\tTreeMapItems.Add(newTreeMapItem() { Label = \"UK\", ColorWeight = 1, Weight = 63181775 });\r\n\t}\r\n}\r\n\r\nSfTreeMap treeMap = new SfTreeMap();\r\nDataModel model = new DataModel();\r\ntreeMap.Items = model.TreeMapItems;\r\n```\r\n\r\nGrouping of TreeMap Items using Levels\r\n\r\nYou can group TreeMap Items using two types of levels\r\n\r\n1. TreeMap Flat Level\r\n2. TreeMap Hierarchical Level\r\n\r\n\r\n**Customizing TreeMap Appearance using ranges**\r\n\r\nFill colors for value ranges can be specified using From and To properties.\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfTreeMap x:Name=\"treeMap\" Items = \"{Binding TreeMapItems}\"\u003e\r\n\t\u003clocal:SfTreeMap.LeafItemColorMapping\u003e\r\n\t\t\u003clocal:RangeColorMapping\u003e\r\n\t\t\t\u003clocal:RangeColorMapping.Ranges\u003e\r\n\t\t\t\t\u003clocal:Range LegendLabel = \"1 % Growth\" From = \"0\" To = \"1\" Color =  \"#77D8D8\"  /\u003e\r\n\t\t\t\t\u003clocal:Range LegendLabel = \"2 % Growth\" From = \"0\" To = \"2\" Color =  \"#AED960\"  /\u003e\r\n\t\t\t\t\u003clocal:Range LegendLabel = \"3 % Growth\" From = \"0\" To = \"3\" Color =  \"#FFAF51\"  /\u003e\r\n\t\t\t\t\u003clocal:Range LegendLabel = \"4 % Growth\" From = \"0\" To = \"4\" Color =  \"#F3D240\"  /\u003e\r\n\t\t\t\u003c/local:RangeColorMapping.Ranges\u003e\r\n\t\t\u003c/local:RangeColorMapping\u003e\r\n\t\u003c/local:SfTreeMap.LeafItemColorMapping\u003e\r\n\u003c/local:SfTreeMap\u003e\r\n```\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n... \r\nObservableCollection ranges = new ObservableCollection();\r\nranges.Add(newRange() { LegendLabel=\"1 % Growth\", From = 0, To = 1, Color = Color.FromHex(\"#77D8D8\") });\r\nranges.Add(newRange() { LegendLabel = \"2 % Growth\", From = 0, To = 2, Color = Color.FromHex(\"#AED960\") });\r\nranges.Add(newRange() { LegendLabel = \"3 % Growth\", From = 0, To = 3, Color = Color.FromHex(\"#FFAF51\") });\r\nranges.Add(newRange() { LegendLabel = \"4 % Growth\", From = 0, To = 4, Color = Color.FromHex(\"#F3D240\") });\r\n\r\ntreeMap.LeafItemColorMapping = new RangeColorMapping (){ Ranges = ranges };\r\n```\r\n\r\n**Leaf level TreeMap item customization**\r\n\r\nThe Leaf level TreeMap items can be customized using LeafItem Setting.\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfTreeMap x:Name=\"treeMap\" Items = \"{Binding TreeMapItems}\"\u003e\r\n\t\u003c!-- ... --\u003e\r\n\t\u003clocal:SfTreeMap.LeafItemSettings\u003e\r\n\t\t\u003clocal: LeafItemSettings BorderWidth=\"1\" BorderColor=\"White\"  /\u003e\r\n\t\u003c/local:SfTreeMap.LeafItemSettings \u003e\r\n\u003c/local:SfTreeMap\u003e\r\n```\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n...\r\nLeafItemSettings leafSetting = new LeafItemSettings();\r\nleafSetting.BorderWidth = 1;\r\nleafSetting.BorderColor = Color.White;\r\n    \r\ntreeMap.LeafItemSettings = leafSetting;\r\n```\r\n\r\n**Enable Legend**\r\n\r\nDisplaying legends if only appropriate for TreeMaps whose leaf nodes have been colored using RangeColorMapping. You can set ShowLegend property value to \"True\"to make the legend visible.\r\n\r\n**Label for Legends**\r\n\r\nYou can customize the labels of the legend items using the LegendLabel property of RangeColorMapping.\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003clocal:SfTreeMap.LegendSettings\u003e\r\n\t\u003clocal:LegendSettings  ShowLegend =\"true\" IconSize=\"15,15\" Size=\"350,70\"  /\u003e\r\n\u003c/local:SfTreeMap.LegendSettings\u003e\r\n```\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n...\r\nLegendSettings legendSettings = new LegendSettings();\r\nlegendSettings.ShowLegend= true;\r\nlegendSettings.IconSize = new Size(15, 15);\r\nlegendSettings.Size = new Size (350, 70);\r\n\r\ntreeMap.LegendSettings= legendSettings;\r\n```\r\n\r\n\r\n\r\n#\u003ca id=\"Barcode\"\u003e\u003c/a\u003eCreating your first Barcode in Xamarin.Forms\r\n\r\nEssential Barcode for Xamarin Forms provides a perfect approach to encode texts using supported symbol types that comprises one dimensional barcodes and two dimensional barcodes. The basic structure of a barcode consists of one or more data characters, optionally one or two check characters, a start pattern as well as a stop pattern.\r\n\r\nThis section explains how to configure a barcode for Xamarin Forms application. The following screenshot illustrates the final output of barcode on iOS, Android and Windows Phone devices. You can also download the entire source code of this demo [here](http://files2.syncfusion.com/Installs/v13.1.0.21/Samples/Xamarin/BarcodeGettingStarted.zip).\r\n\r\n\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nWhen you acquire Essential Studio components through the Xamarin Component Store interface from your IDE, after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component Manager, you have to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL Project in your solution. You can do this manually by adding the relevant PCL assembly references to your PCL project contained in the following path inside your solution folder.\r\n\r\n```\r\nComponents/syncfusionessentialstudio-version/lib/pcl/\r\n```\r\n\r\nAlternatively, when you download Essential Studio from Syncfusion.com or through the Xamarin Store web interface, add all the assembly references manually.  \r\n\r\nAfter installing Essential Studio for Xamarin, you can find all the required assemblies in the installation folders, typically\r\n\t\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\nOtherwise, after downloading through the Xamarin Store web interface, you can find all the required assemblies in the following folder\r\n\r\n**{download location}\\syncfusionessentialstudio-version\\lib**\r\n\r\nThen, you can add the assembly references to the respective projects as follows.\r\n\r\n**PCL project**\r\n\r\n```\r\npcl\\Syncfusion.SfBarcode.XForm.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nandroid\\Syncfusion.SfBarcode.Android.dll\r\nandroid\\Syncfusion.SfBarcode.XForms.Android.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\nios\\Syncfusion.SfBarcode.iOS.dll \r\nios\\Syncfusion.SfBarcode.XForms.iOS.dll\r\nios\\Syncfusion.SfBarcode.XForm.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nwp8\\Syncfusion.SfBarcode.WP8.dll\r\nwp8\\Syncfusion.SfBarcode.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Barcode for Xamarin is compatible with Xamarin.Forms 1.3.4.6332.\r\n\r\nCurrently an additional step is required for configuring Windows Phone and iOS projects. We need to create an instance of the Barcode custom renderer as shown below.\r\n\r\nCreate an instance of SfBarcodeRenderer in the MainPage constructor of the Windows Phone project as shown below\r\n\r\n```csharp\r\npublic MainPage()\r\n{\r\n\tnew SfBarcodeRenderer();\r\n\t...  \r\n}\r\n```\r\n\r\nCreate an instance of SfBarcodeRenderer in FinishedLaunching overridden method of AppDelegate class in the iOS Project as shown below\r\n\r\n```csharp\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n\tnew SfBarcodeRenderer();\r\n\t...  \r\n}\r\n```\r\n\r\n**Adding and configuring the Barcode**\r\n\r\nThe Barcode control can be configured entirely in C# code or using XAML markup.\r\n\r\nAdd reference to SFBarcode such as follows\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nusing Syncfusion.SfBarcode.XForms;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\nxmlns:syncfusion=\"clr-namespace:Syncfusion.SfBarcode.XForms;assembly=Syncfusion.SfBarcode.XForms\"\r\n```\r\n\r\nCreate an instance of SfBarcode in XAML or code-behind using the reference of SfBarcode.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nSfBarcode barcode = new SfBarcode();\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfBarcode/\u003e\r\n```\r\n\r\nThen, you can assign the text that you want to encode.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nbarcode.Text = \"www.wikipedia.org\";\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfBarcode Text=\"www.wikipedia.org\"/\u003e\r\n```\r\n\r\nSpecify the required symbology to encode the given text. By default, the given text is encoded using Code 39 symbology.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nbarcode.Symbology = BarcodeSymbolType.QRCode;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfBarcode Text=\"www.wikipedia.org\" Symbology=\"QRCode\"/\u003e\r\n```\r\n\r\nFor customizing the barcode, initialize the settings of corresponding barcode symbology.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nSfQRBarcodeSettings settings = new SfQRBarcodeSettings();\r\nsettings.XDimension = 6;\r\nbarcode.SymbologySettings = settings;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfBarcode Text=\"www.wikipedia.org\" Symbology=\"QRCode\"\u003e\r\n    \u003csyncfusion:SfBarcode.SymbologySettings\u003e\r\n      \u003csyncfusion:SfQRBarcodeSettings XDimension=\"6\"/\u003e\r\n    \u003c/syncfusion:SfBarcode.SymbologySettings\u003e\r\n\u003c/syncfusion:SfBarcode\u003e\r\n```\r\n\r\nFinally, the barcode is generated as displayed in the following screenshot for the following code example.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\npublic SamplePage()\r\n{\r\n      InitializeComponent();\r\n      SfBarcode barcode = new SfBarcode();\r\n      barcode.BackgroundColor = Color.Gray;\r\n      barcode.Text = \"www.wikipedia.org\";\r\n      barcode.Symbology = BarcodeSymbolType.QRCode;\r\n      SfQRBarcodeSettings settings = new SfQRBarcodeSettings();\r\n      settings.XDimension = 6;\r\n      barcode.SymbologySettings = settings;\r\n      this.Content = barcode;\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:syncfusion=\"clr-namespace:Syncfusion.SfBarcode.XForms;assembly=Syncfusion.SfBarcode.XForms\"\r\n             x:Class=\"BarcodeGettingStarted.SamplePage\"\u003e\r\n  \u003csyncfusion:SfBarcode BackgroundColor=\"Gray\" Text=\"www.wikipedia.org\" Symbology=\"QRCode\"\u003e\r\n    \u003csyncfusion:SfBarcode.SymbologySettings\u003e\r\n      \u003csyncfusion:SfQRBarcodeSettings XDimension=\"6\"/\u003e\r\n    \u003c/syncfusion:SfBarcode.SymbologySettings\u003e\r\n  \u003c/syncfusion:SfBarcode\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\t\r\n\r\n\r\n#\u003ca id=\"XlsIO\"\u003e\u003c/a\u003eXlsIO\r\n\r\nEssential XlsIO for Xamarin is a .NET PCL library that can be used to create and modify Microsoft Excel documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\n**Supported Features**\r\n\r\n- Charts for data visualization\r\n- Conditional Formatting\r\n- Data Validation\r\n- Tables\r\n- Importing XML data\r\n- Importing Business Objects\r\n- Formulas\r\n- Template Marker\r\n- Auto-Shapes\r\n- Cells Formatting\r\n- Cell Grouping\r\n- Data Filtering\r\n- Data Sorting\r\n- Find Data\r\n- Comments\r\n- HTML Conversion\r\n- Named Ranges\r\n- Number Formats\r\n- Page settings\r\n- Page breaks\r\n- Header and footer images\r\n- R1C1 Reference Mode\r\n- Re-calculation\r\n- R1C1 Formulas\r\n- Dis-contiguous Named Ranges\r\n- Hyperlinks\r\n- Freeze panes\r\n- Sheet Tab color RGB\r\n- Hide rows and columns\r\n\r\n**Getting Started**\r\n\r\nThe following steps demonstrate how to create a simple excel document in a Xamarin.Forms project using Essential XlsIO. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v12.2.0.40/Samples/Xamarin/XlsIO_GettingStarted.zip).\r\n\r\n1. Create new Xamarin.Forms portable project.\r\n\r\n2. Next, you need to reference Essential Studio components in your solution. \r\n   XlsIO is packaged as a portable class library so currently there is no way to add reference to it from within the Xamarin component store IDE interface. You would need to obtain the required assemblies either through the Xamarin component store  web interface or from Syncfusion.com. Typically you would add reference to XlsIO only in the PCL project of your Xamarin.Forms application. The required assembly references are\r\n\r\n\t```\r\n\tSyncfusion.Compression.Portable.dll\r\n\tSyncfusion.XlsIO.Portable.dll\r\n\t```\r\n\tNote: If you had already referenced one of our UI components (Chart, Gauge or TreeMap) components from within the Xamarin component store IDE interface then the XlsIO assembly has already been downloaded and available in your solution folder, You can then manually add references from that folder.\r\n\r\n\t```\r\n\tComponents/syncfusionessentialstudio-version/lib/pcl/\r\n\t```\t\t\r\n\r\n3. Use the following C# code to generate a simple excel file using Essential XlsIO\r\n\r\n\t```csharp\r\n\t//Instantiate excel engine\r\n\tExcelEngine excelEngine = new ExcelEngine();\r\n\r\n\t//Excel application\r\n\tIApplication application = excelEngine.Excel;\r\n\tapplication.DefaultVersion = ExcelVersion.Excel2013;\r\n\r\n\t//A new workbook is created.[Equivalent to creating a new workbook in MS Excel]\r\n\t//The new workbook will have 1 worksheet\r\n\tIWorkbook workbook = application.Workbooks.Create(1);\r\n\r\n\t//The first worksheet object in the worksheets collection is accessed.\r\n\tIWorksheet sheet = workbook.Worksheets[0];\r\n\tsheet.Range[\"A1\"].Text = \"Hello World!\";\r\n\tworkbook.Version = ExcelVersion.Excel2013;\r\n\r\n\t//Saving workbook as stream\r\n\tMemoryStream stream = new MemoryStream();\r\n\tworkbook.SaveAs(stream);\r\n\r\n\t//Closing workbook\r\n\tworkbook.Close();\r\n\r\n\t//Disposing excel engine\r\n\texcelEngine.Dispose();\r\n\t```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n#\u003ca id=\"DocIO\"\u003e\u003c/a\u003eDocIO\r\n\r\nEssential DocIO for Xamarin is a .NET PCL library that can be used to read and write Microsoft Word documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\n**Features**\r\n\r\nHere is a quick summary of the features available in Essential DocIO\r\n\r\n- Create new Word documents.\r\n- Modify existing Microsoft Word documents.\r\n- Format text, tables using built-in and custom styles.\r\n- Insert bullets and numbering.\r\n- Insert, edit, and remove fields, form fields, hyperlinks, endnotes, footnotes, comments, Header footers.\r\n- Insert and extract images, OLE objects.\r\n- Insert line breaks, page breaks, column breaks and section breaks.\r\n- Find and Replace text with its original formatting.\r\n- Insert Bookmarks and navigate corresponding bookmarks to insert, replace, and delete content.\r\n- Advanced Mail Merge support with different data sources.\r\n- Clone multiple documents and merge into a single document.\r\n- Read and write Built-In and Custom Document Properties.\r\n- Define page setup settings and background.\r\n- Create or edit Word 97-2003, 2007, 2010, and 2013 documents\r\n\r\n**Getting Started**\r\n\r\nThe following steps demonstrate how to create a simple word document in a Xamarin.Forms project using Essential DocIO.\r\nYou can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v12.2.0.40/Samples/Xamarin/DocIO_GettingStarted.zip).\r\n\r\n1. Create new Xamarin.Forms portable project.\r\n\r\n2. Next, you need to reference Essential Studio components in your solution. \r\n   DocIO is packaged as a portable class library so currently there is no way to add reference to it from within the Xamarin component store IDE interface. You would need to obtain the required assemblies either through the Xamarin component store  web interface or from Syncfusion.com. Typically you would add reference to DocIO only in the PCL project of your application. The required assembly references are\r\n\r\n\t```\r\n\tSyncfusion.Compression.Portable.dll\r\n\tSyncfusion.DocIO.Portable.dll\r\n\t```\r\n\tIf you had already referenced one of our UI components (Chart, Gauge or Treemap) components from within the Xamarin component store IDE interface then the DocIO assembly has already been downloaded and available in your solution folder, You can then manually add references from that folder.\r\n\r\n\t```\r\n\tComponents/syncfusionessentialstudio-version/lib/pcl/\r\n\t```\r\n\r\n3. A new Word document can be easily created from scratch by instantiating a new instance of the WordDocument class. This class is the root node for all other nodes in the Document Object Model for Essential DocIO library. Using this DOM, you can add, edit, and remove content from documents by iterating elements. The following code example illustrates how to create a Word document with minimal content (one section and one paragraph).\r\n\r\n\t```csharp\r\n\t//Creates a new Word document instance\r\n\tWordDocument doc = new WordDocument();\r\n\r\n\t//Adds one section and one paragraph to the document.\r\n\tdoc.EnsureMinimal();\r\n\t```\r\n\r\n4. Add a new section at the end of a document by invoking the AddSection method of WordDocument class. The following code example illustrates how to add a new section to a Word document.\r\n\r\n\t```csharp\r\n\t//Adds a new section to the document.\r\n\tWSection section = doc.AddSection();\r\n\t```\r\n\r\n5. Add a new paragraph at the end of section by invoking the AddParagraph method of WSection class; also, you can add a new table at the end of section by invoking the AddTable method of WSection class. The following code example illustrates how to add a new Paragraph and Table to a Word document.\r\n\r\n\t```csharp\r\n\t//Adds a new Paragraph to the section.\r\n\tIWParagraph para = section.AddParagraph();\r\n\r\n\t//Adds a new Table to the section.\r\n\tIWTable table = section.AddTable();\r\n\t```\r\n\r\n6. You can append text to a paragraph by invoking the AppendText method of WParagraph class. The following code example illustrates how to append text to a Word document.\r\n\r\n\t```csharp\r\n\t//Appends text to the paragraph.\r\n\tparagraph.AppendText(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");\r\n\t```\r\n\r\n7. You can save a Word document by invoking the Save method of WordDocument class. The following code example illustrates how to save a Word document.\r\n\r\n\t```csharp\r\n\t//Saves the generated Word document.\r\n\tMemoryStream stream = new MemoryStream();\r\n\tdoc.Save(stream, FormatType.Word2013);\r\n\r\n\t//Releases the resources used by the WordDocument instance.\r\n\tdoc.Close();\r\n\t```\r\n\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"PDF\"\u003e\u003c/a\u003ePDF\r\n\r\n\r\nEssential PDF for Xamarin is a .NET PCL library that can be used to create and modify Adobe PDF documents from within Xamarin.iOS, Xamarin.Android and Xamarin.Forms applications.\r\n\r\nAll of the elements in a typical PDF file like the text, formatting, images and tables are accessible through a comprehensive set of API\u0027s. This makes it possible to easily create richly formatted PDF documents as well as modify existing ones.\r\n\r\n**Features:**\r\n\r\n**Document level features:**\r\n\r\n- Create and load PDF documents files and streams\r\n- Save PDF files to disk and Streams\r\n- Document information\r\n- Document viewer preference\r\n- Document file attachments\r\n- Document level java scripts and actions\r\n- Document outline\r\n- Add and remove Pdf pages\r\n- Import page form existing document\r\n- Document merging \r\n- Booklet\r\n- Stamp\r\n- Page orientation\r\n- Page sizes\r\n- Headers and Footers\r\n- Actions\r\n\r\n**Text**\r\n\r\n- Drawing Text\r\n- Text formatting\r\n- Pagination\r\n\r\n**Graphics**\r\n\r\n- Pen and brush for stroking operations\r\n- Graphics primitives: lines, ellipses, rectangles, arcs, pie, Bezier curves, paths.\r\n- Layers\r\n- Patterns\r\n- Drawing of external page content\r\n- Color spaces\r\n- Barcode\r\n\r\n**Forms**\r\n\r\n- Create, load and save PDF forms\r\n- Add, edit, remove and rename form fields\r\n- Supporting text box fields, combo box fields, list box fields, push button fields, radio button fields\r\n- Flatten form fields\r\n- Enumerating the form fields\r\n- Form actions\r\n\r\n**Fonts**\r\n\r\n- Standard Fonts\r\n\r\n**Images**\r\n\r\n- Jpeg image support\r\n\r\n**Tables** :\r\n\r\n- Cell/Row/Column formatting\r\n- Header\r\n- Pagination\r\n- Borders\r\n- Row span and column span\r\n- Nested\r\n- Cell Padding and spacing\r\n\r\n**Page Level Operations**\r\n\r\n- Headers and Footers\r\n- Page Label\r\n- Automatic fields\r\n\r\n**Pdf Annotations**\r\n\r\n- Add, edit and remove pdf annotations\r\n- Custom appearance for annotations\r\n\r\n**Supported annotations**\r\n\r\n- Free Text annotation\r\n- Rubber stamp annotations\r\n- File attachment annotation\r\n- Link annotation\r\n- Line annotation\r\n- Ink annotations\r\n- Text markup annotations\r\n- sound annotations\r\n- 3D-Annotations.\r\n\r\n**Barcode**\r\n\r\n- Add the barcode into the PDF document\r\n\r\n**Supported barcodes:**\r\n\r\n- QR barcode\r\n- Data matrix barcode\r\n- Code39\r\n- Code39ext\r\n- Code 11\r\n- Coda bar\r\n- Code32\r\n- Code93\r\n- Code93 extended\r\n- Code128 A\r\n- Code128 B\r\n- Code128 C\r\n\r\n**Getting Started:**\r\n\r\nThe following steps demonstrate how create a simple PDF document in a Xamarin.Forms project using Essential PDF. You can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v12.2.0.40/Samples/Xamarin/PDF_GettingStarted.zip).\r\n\r\n1. Create a new Xamarin.Forms portable project.\r\n\r\n2. Next, you need to reference Essential Studio components in your solution. \r\n   Essential PDF is packaged as a portable class library so currently there is no way to add reference to it from within the Xamarin component store IDE interface. You would need to obtain the required assemblies either through the Xamarin component store  web interface or from Syncfusion.com. Typically you would add reference to Essential PDF only in the PCL project of your application. The required assembly references are\r\n\r\n\t```\r\n\tSyncfusion.Compression.Portable.dll\r\n\tSyncfusion.Pdf.Portable.dll\r\n\t```\r\n\tNote: If you had already referenced one of our UI components (Chart, Gauge or Treemap) components from within the Xamarin component store IDE interface then the DocIO assembly has already been downloaded and available in your solution folder, You can then manually add references from that folder.\r\n\r\n\t```\r\n\tComponents/syncfusionessentialstudio-version/lib/pcl/\r\n\t```\r\n\r\n3. Use the following C# code to generate a simple PDF using Essential PDF\r\n\r\n\t```csharp\r\n        //Create a new PDF document.\r\n        PdfDocument document = new PdfDocument();\r\n\r\n        //Add a page\r\n        PdfPage page = document.Pages.Add();\r\n\r\n        //Creates Pdf graphics for the page\r\n        PdfGraphics graphics = page.Graphics;\r\n\r\n        //Creates a solid brush.\r\n        PdfBrushbrush =newPdfSolidBrush(Color.Black);\r\n\r\n        //Sets the font.\r\n        PdfFontfont =newPdfStandardFont(PdfFontFamily.Helvetica, fontSize);\r\n\r\n        //Draws the text.\r\n        graphics.DrawString(\"Lorem Ipsum is simply dummy text of the\r\n\t\tprinting and typesetting industry. Lorem Ipsum has been the\r\n\t\tstandard dummy text ever since the 1500s, when an unknown printer\r\n\t\ttook a galley of type and scrambled it to make a type specimen\r\n\t\tbook.\", font, brush, new RectangleF(0,0, page.GetClientSize().\r\n\t\tWidth,200));\r\n\r\n        //Saves the document.\r\n        MemoryStream stream = new MemoryStream();\r\n        document.Save(stream);\r\n        document.Close(true);\r\n\t```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"BusyIndicator\"\u003e\u003c/a\u003eBusyIndicator\r\n\r\n**Introduction**\r\n\r\nThe Busy Indicator control enables you to know when the application is busy. SfBusyIndicator includes over 10 pre-built animations that can be displayed within your applications.\r\n\r\n\r\n\r\nThis section provides a quick overview for working with Essential BusyIndicator for Xamarin.Forms.\r\n\r\n## Adding Syncfusion assembly reference\r\n\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfBusyIndicator.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion. SfBusyIndicator.Andriod.dll\r\nAndroid\\Syncfusion.SfBusyIndicator.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfBusyIndicator.iOS.dll \r\niOS\\Syncfusion.SfBusyIndicator.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfBusyIndicator.WP8.dll\r\nWinPhone\\Syncfusion SfBusyIndicator.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential BusyIndicator for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the BusyIndicator custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfBusyIndicatorRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfBusyIndicatorRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfBusyIndicatorRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfBusyIndicatorRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n\r\n**Adding and configuring the BusyIndicator**\r\n\r\nThe BusyIndicator control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfBusyIndicator\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfBusyIndicator;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new BusyIndicatorPage ();\r\n        }\r\n\r\n    }\r\npublic class BusyIndicatorPage : ContentPage\r\n{\r\n        SfBusyIndicator sfbusyindicator;\r\n        public BusyIndicatorPage ()\r\n        {\r\n            sfbusyindicator = new SfBusyIndicator();\r\n        } \r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \r\n            x:Class=\"BusyIndicatorGettingStarted.BusyIndicatorGettingStarted\" BackgroundColor=\"White\"\r\n            xmlns:syncfusion=\"clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms\"\r\n            xmlns:picker=\"clr-namespace:BusyIndicatorGettingStarted;assembly=BusyIndicatorGettingStarted\"\u003e\r\n    \u003cContentPage.Content\u003e x:Class=\"BusyIndicatorGettingStarted.Sample\"\u003e\r\n\u003cContentPage.Content\u003e\r\n        \u003csyncfusion:SfBusyIndicator  \r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n## Configure the BusyIndicator Properties\r\n\r\nThe next step is to add BusyIndicator properties in application/\r\n\r\n**[C#]**\r\n\r\n```charp\r\nSfBusyIndicator sfbusyindicator = new SfBusyIndicator();\r\nsfbusyindicator.AnimationType = AnimationTypes.Battery;\r\nsfbusyindicator.ViewBoxWidth = 150;\r\nsfbusyindicator.ViewBoxHeight = 150;\r\nsfbusyindicator.BackgroundColor = Color.White; \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfBusyIndicator x:Name=\"sfbusyindicator\" BackgroundColor=\"White\" ViewBoxHeight=\"150\" ViewBoxWidth=\"150\" AnimationType=\"Ball\"/\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"RangeSlider\"\u003e\u003c/a\u003eRangeSlider\r\n\r\n**Introduction**\r\n\r\nRangeSlider control allows you to select the range of value within the specified minimum and maximum limit. You can select the range by moving the thumb control along a track.\r\n\r\n\r\n\r\nThis section provides a quick overview for working with Essential RangeSlider for Xamarin.Forms.\r\n\r\n## Adding Syncfusion assembly reference\r\n\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfRangeSlider.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion. SfRangeSlider.Andriod.dll\r\nAndroid\\Syncfusion.SfRangeSlider.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfRangeSlider.iOS.dll \r\niOS\\Syncfusion.SfRangeSlider.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfInput.WP8.dll\r\nWinPhone\\Syncfusion.SfShared.WP8.dll\r\nWinPhone\\Syncfusion SfRangeSlider.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential RangeSlider for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the RangeSlider custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfRangeSliderRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfRangeSliderRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfRangeSliderRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfRangeSliderRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n\r\n**Adding and configuring the RangeSlider**\r\n\r\nThe RangeSlider control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfRangeSlider\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfRangeSlider;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new RangeSliderPage ();\r\n        }\r\n\r\n    }\r\npublic class RangeSliderPage : ContentPage\r\n{\r\n        SfRangeSlider sfrangeslider;\r\n        public RangeSliderPage ()\r\n        {\r\n            sfrangeslider = new SfRangeSlider();\r\n        }\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" BackgroundColor=\"White\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"RangeSliderGettingStarted.RadialSliderPage\"\r\n xmlns:syncfusion=\"clr-namespace:Syncfusion.SfRangeSlider.XForms;assembly=Syncfusion.SfRangeSlider.XForms\"\u003e\r\n    \u003cContentPage.Content\u003e\r\n            \u003csyncfusion:SfRangeSlider /\u003e\r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n## Configure the RangeSlider Properties\r\n\r\nThe next step is to add RangeSlider properties in application/\r\n\r\n**[C#]**\r\n\r\n```charp\r\nSfRangeSlider sfrangeslider = new SfRangeSlider();\r\nsfrangeslider.Minimum= 0;\r\nsfrangeslider.Maximum = 12;\r\nsfrangeslider.ShowRange= true;\r\nsfrangeslider.RangeStart = 0;\r\nsfrangeslider.RangeEnd = 12;\r\nsfrangeslider.ShowValueLabels= True; \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfRangeSlider HeightRequest=\"100\" TickFrequency=\"2\" Minimum=\"0\" Maximum=\"12\" TickPlacement=\"BottomRight\" ShowRange=\"True\" RangeStart=\"4\" RangeEnd=\"8\" Orientation=\"Horizontal\" WidthRequest=\"400\"\u003e\u003c/syncfusion:SfRangeSlider\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"AutoComplete\"\u003e\u003c/a\u003eAutoComplete\r\n\r\n**Introduction**\r\n\r\nAutoComplete functionality provides suggestions to the user while typing. There are several modes of suggestions. The suggested text can be appended to the original text or it can be displayed in a drop-down list so that user can choose from different options.\r\n\r\n\r\n\r\nThis section provides a quick overview for working with Essential AutoComplete for Xamarin.Forms.\r\n\r\n## Adding Syncfusion assembly reference\r\n\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfAutoComplete.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion. SfAutoComplete.Andriod.dll\r\nAndroid\\Syncfusion.SfAutoComplete.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfAutoComplete.iOS.dll \r\niOS\\Syncfusion.SfAutoComplete.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfInput.WP8.dll\r\nWinPhone\\Syncfusion.SfShared.WP8.dll\r\nWinPhone\\Syncfusion SfAutoComplete.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential AutoComplete for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the AutoComplete custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfAutoCompleteRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfAutoCompleteRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfAutoCompleteRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfAutoCompleteRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n\r\n**Adding and configuring the AutoComplete**\r\n\r\nThe AutoComplete control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfAutoComplete\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfAutoComplete;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new AutoCompletePage ();\r\n        }\r\n\r\n    }\r\npublic class AutoCompletePage : ContentPage\r\n{\r\n        SfAutoComplete sfautocomplete;\r\n        public AutoCompletePage ()\r\n        {\r\n            sfautocomplete = new SfAutoComplete();\r\n        }\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" BackgroundColor=\"White\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"AutoCompleteStarted.AutoCompletePage\"\r\n xmlns:syncfusion=\"clr-namespace:Syncfusion.SfAutoComplete.XForms;assembly=Syncfusion.SfAutoComplete.XForms\"\u003e\r\n    \u003cContentPage.Content\u003e\r\n            \u003csyncfusion:SfAutoComplete /\u003e\r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n## Configure the AutoComplete Properties\r\n\r\nThe next step is to add AutoComplete properties in application/\r\n\r\n**[C#]**\r\n\r\n```charp\r\nSfAutoComplete sfautocomplete = new SfAutoComplete  ();\r\nsfautocomplete .AutoCompleteSource= list1;\r\nsfautocomplete .MinimumPrefixCharacter= 2;\r\nsfautocomplete .MaximumDropDownHeight= 200;\r\nsfautocomplete .PopUpelay= 100; \r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfAutoComplete x:Name=\"sfautocomplete\" BackgroundColor=\"White\" MinimumPrefixCharacter=\"2\" MaximumDropDownHeight=\"200\" PopUpDelay=\"100\"/\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"NumericTextBox\"\u003e\u003c/a\u003eNumericTextBox\r\n\r\n**Introduction**\r\n\r\nNumericTextBox is an advanced version of the EditText control which restricts input to numeric values. The control respects the UI culture and can be configured to display different formats like currency format, scientific format, etc.\r\n\r\n\r\nThis section provides a quick overview for working with Essential NumericTextBox for Xamarin.Forms.\r\n\r\n## Adding Syncfusion assembly reference\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfNumericTextBox.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion.SfNumericTextBox.Andriod.dll\r\nAndroid\\Syncfusion.SfNumericTextBox.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfNumericTextBox.iOS.dll \r\niOS\\Syncfusion.SfNumericTextBox.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfInput.WP8.dll\r\nWinPhone\\Syncfusion.SfShared.WP8.dll\r\nWinPhone\\Syncfusion.SfNumericTextBox.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential NumericTextBox for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the NumericTextBox custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfNumericTextBoxRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfNumericTextBoxRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfNumericTextBoxRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfNumericTextBoxRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n**Adding and configuring the NumericTextBox**\r\n\r\nThe NumericTextBox control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of SfNumericTextBox\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfNumericTextBox;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new NumericTextBoxPage ();\r\n        }\r\n\r\n    }\r\npublic class NumericTextBoxPage : ContentPage\r\n{\r\n        SfNumericTextBox sfnumerictextbox;\r\n        public NumericTextBoxPage ()\r\n        {\r\n            sfnumerictextbox = new SfNumericTextBox();\r\n        }\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\nUse this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" BackgroundColor=\"White\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"NumericTextBoxGettingStarted.NumericTextBoxPage\"\r\n xmlns:syncfusion=\"clr-namespace:Syncfusion.SfNumericTextBox.XForms;assembly=Syncfusion.SfNumericTextBox.XForms\"\u003e\r\n    \u003cContentPage.Content\u003e\r\n            \u003csyncfusion:SfNumericTextBox /\u003e\r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n**Configure the NumericTextBox Properties**\r\n\r\nThe next step is to add NumericTextBox properties in application\r\n\r\n**[C#]**\r\n\r\n```csharp\r\nSfNumericTextBox sfnumerictextbox = new SfNumericTextBox();\r\nsfnumerictextbox.Value= 1000;\r\nsfnumerictextbox.FormatString= “c”;\r\nsfnumerictextbox.AllowNull= true;\r\nsfnumerictextbox.MaximumNumberDecimalDigits= 2;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfNumericTextBox HeightRequest=\"100\"  Value=\"1000\"  Orientation=\"Horizontal\" WidthRequest=\"200\" FormatString=”C” AllowNull=”true” MaximumNumberDecimalDigits=”2”\u003e\r\n \u003c/syncfusion:SfNumericTextBox\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n#\u003ca id=\"Calendar\"\u003e\u003c/a\u003eCalendar\r\n\r\n**Introduction**\r\n\r\nThe Essential Xamarin Calendar widget provides the multi-view representation to display and select one or more dates within specified ranges. Also provides a gesture friendly UI to perform operations like navigations, events, etc.\r\n\r\n\r\nThis section explains you the steps to configure a Calendar control in a real-time scenario and also provides a walk-through on some of the customization features available in Calendar control.\r\n\r\n## Adding Syncfusion assembly reference\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfCalendar.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion.SfCalendar.Andriod.dll\r\nAndroid\\Syncfusion.SfCalendar.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfCalendar.iOS.dll \r\niOS\\Syncfusion.SfCalendar.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfInput.WP8.dll\r\nWinPhone\\Syncfusion.SfShared.WP8.dll\r\nWinPhone\\Syncfusion.SfCalendar.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Calendar for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Calendar custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfCalendarRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfCalendarRenderer ();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfCalendarRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfCalendarRenderer ();\r\n\r\n             ...\r\n\r\n       }\r\n**Adding and configuring the Calendar**\r\n\r\nThe Calendar control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of Calendar\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfCalendar;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new CalendarPage ();\r\n        }\r\n\r\n    }\r\npublic class CalendarPage : ContentPage\r\n{\r\n        SfCalendar sfCalendar;\r\n        public CalendarPage ()\r\n        {\r\n            sfCalendar = new SfCalendar();\r\n\t\t\tContent = sfCalendar;\r\n        }\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\nUse this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" BackgroundColor=\"White\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"CalendarGettingStarted.CalendarPage\"\r\n xmlns:syncfusion=\"clr-namespace:Syncfusion.SfCalendar.XForms;assembly=Syncfusion.SfCalendar.XForms\"\u003e\r\n    \u003cContentPage.Content\u003e\r\n            \u003csyncfusion:SfCalendar /\u003e\r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n**Configure the Calendar Properties**\r\n\r\nThe next step is to add Calendar properties in application\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\tSfCalendar sfCalendar = new SfCalendar ();\r\n\tsfCalendar.ViewMode=ViewMode.MonthView;\r\n\tDateTime d1=new DateTime(2015,1,1);\r\n\tsfCalendar.MinDate=mindate;\r\n\tDateTime d2=new DateTime(2040,12,12);\r\n\tsfCalendar.MaxDate=d2;\r\n\tsfCalendar.SelectionMode=SelectionMode.MultiSelection;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfCalendar ViewMode=\"MonthView\" SelectionMode=\"MultiSelection\"\u003e\r\n \u003c/syncfusion:SfCalendar\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n#\u003ca id=\"Rating\"\u003e\u003c/a\u003eRating\r\n\r\n**Introduction**\r\n\r\nThe Essential Xamarin Rating widget provides the multi-view representation to display and select one or more dates within specified ranges. Also provides a gesture friendly UI to perform operations like navigations, events, etc.\r\n\r\n\r\n\r\nThis section explains you the steps to configure a rating control in a real-time scenario and also provides a walk-through on some of the customization features available in Rating control.\r\n\r\n## Adding Syncfusion assembly reference\r\nAdd the required Syncfusion assembly references to the respective projects as explained below.\r\n\r\nAll the required assemblies can be found in the installation folders, typically\r\n\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.1\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.1\\lib_\r\n\r\n**PCL project**\r\n\r\n```\r\nXForms\\Syncfusion.SfRating.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nAndroid\\Syncfusion.SfRating.Andriod.dll\r\nAndroid\\Syncfusion.SfRating.XForms.Andriod.dll\r\n```\r\n\r\n**iOS project**\r\n\r\n```\r\niOS\\Syncfusion.SfRating.iOS.dll \r\niOS\\Syncfusion.SfRating.XForms.iOS.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nWinPhone\\Syncfusion.SfInput.WP8.dll\r\nWinPhone\\Syncfusion.SfShared.WP8.dll\r\nWinPhone\\Syncfusion.SfRating.XForms.WinPhone.dll\r\n```\r\n\r\nNote: Essential Rating for Xamarin is compatible with Xamarin Forms 1.3.\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Calendar custom renderer as mentioned below.\r\n\r\nCreate an instance of the SfRatingRenderer in MainPage constructor in Windows Phone project as shown below\r\n\r\n     public MainPage()\r\n\r\n       {\r\n\r\n             new SfRatingRenderer();\r\n\r\n             ...  \r\n\r\n      }\r\n\r\nCreate an instance of the SfRatingRenderer in FinishedLaunching overridden method of AppDelegate class in iOS Project as shown below\r\n\r\n\tpublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n\r\n        {\r\n\r\n            ...\r\n\r\n            new SfRatingRenderer();\r\n\r\n             ...\r\n\r\n       }\r\n**Adding and configuring the Rating**\r\n\r\nThe Rating control can be configured entirely in C# code or using XAML markup.\r\n\r\nCreate an instance of Rating\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n// Update App.cs source in this file.\r\nusing Syncfusion.XForms.SfRating;\r\n…\r\n…\r\npublic class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            MainPage = new RatingPage ();\r\n        }\r\n\r\n    }\r\npublic class RatingPage : ContentPage\r\n{\r\n        SfRating sfRating;\r\n        public RatingPage ()\r\n        {\r\n            sfRating = new SfRating();\r\n\t\t\tContent = sfRating;\r\n        }\r\n}\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n// Use this in App.CS source.\r\nUse this in App.CS source.\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" BackgroundColor=\"White\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"RatingGettingStarted.RatingPage\"\r\n xmlns:syncfusion=\"clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms\"\u003e\r\n    \u003cContentPage.Content\u003e\r\n            \u003csyncfusion:SfRating /\u003e\r\n    \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e \u003c/ContentPage.Content\u003e\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n**Configure the Rating Properties**\r\n\r\nThe next step is to add Calendar properties in application\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\tSfRating sfRating = new SfRating ();\r\n\tsfRating.ItemCount=5;\r\n\tsfRating.Precision=Precision.Standard;\r\n\tsfRating.ToolTipPlacement=ToolTipPlacement.None;\r\n\tsfRating.ItemSize=70;\r\n```\r\n\r\n**[XAML]**\r\n\r\n```xml\r\n\u003csyncfusion:SfRating ItemCount=\"5\" Precision=\"Exact\" ToolTipPlacement=\"None\" ItemSize=\"70\"\u003e\r\n \u003c/syncfusion:SfRating\u003e\r\n```\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n#\u003ca id=\"Schedule\"\u003e\u003c/a\u003eSchedule\r\n\r\n**Introduction**\r\n\r\nThis section provides a quick overview for working with Essential Schedule for Xamarin.Forms. We will walk through the entire process of configuring a real world schedule.\r\nYou can also download the entire source code of this demo from [here](http://files2.syncfusion.com/Installs/v13.4.0.53/Samples/Xamarin/Schedule_GettingStarted.zip).\r\n\r\n**Referencing Essential Studio components in your solution**\r\n\r\nIf you had acquired Essential Studio components through the Xamarin component store interface from within your IDE, then after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component manager,  you will still need to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL project in your solution. You can do this by manually adding the relevant PCL assembly references to your PCL project contained in the following path inside of your solution folder  \r\n\r\n```\r\nComponents/syncfusionessentialstudio-version/lib/pcl/\r\n```\r\n\r\nAlternatively if you had downloaded Essential Studio from Syncfusion.com or through the Xamarin store web interface then all assembly references need to be added manually.  \r\n\r\nAfter installing Essential Studio for Xamarin, all the required assemblies can be found in the installation folders, typically\r\n\t\r\n**{Syncfusion Installed location}\\Essential Studio\\13.1.0.21\\lib**\r\n\r\n_Eg: C:\\Program Files (x86)\\Syncfusion\\Essential Studio\\13.1.0.21\\lib_\r\n\r\nor after downloading through the Xamarin store web interface, all the required assemblies can be found in the below folder\r\n\r\n**{download location}\\syncfusionessentialstudio-version\\lib**\r\n\r\nYou can then add the assembly references to the respective projects as shown below\r\n\r\n**PCL project**\r\n\r\n```\r\npcl\\Syncfusion.SfSchedule.XForms.dll \r\n```\r\n\r\n**Android project**\r\n\r\n```\r\nandroid\\Syncfusion.SfSchedule.Android.dll\r\nandroid\\Syncfusion.SfSchedule.XForms.Android.dll\r\n```\r\n\r\n**iOS(Classic) project**\r\n\r\n```\r\nios\\Syncfusion.SfSchedule.iOS.dll \r\nios\\Syncfusion.SfSchedule.XForms.iOS.dll\r\nios\\Syncfusion.SfSchedule.XForms.dll\r\n```\r\n\r\n**iOS(Unified) project**\r\n\r\n```\r\nios-unified\\Syncfusion.SfSchedule.iOS.dll\r\nios-unified\\Syncfusion.SfSchedule.XForms.iOS.dll\r\nios-unified\\Syncfusion.SfSchedule.XForms.dll\r\n```\r\n\r\n**Windows Phone project**\r\n\r\n```\r\nwp81\\\\Syncfusion.SfSchedule.WP.dll\r\nwp81\\\\Syncfusion.SfSchedule.XForms.WinPhone.dll\r\n\r\n```\r\n\r\nCurrently an additional step is required for Windows Phone and iOS projects. We need to create an instance of the Schedule custom renderer as shown below.\r\n\r\nCreate an instance of SfScheduleRenderer in the MainPage constructor of the Windows Phone project as shown below\r\n\r\n```csharp\r\npublic MainPage()\r\n{\r\n\tnew SfScheduleRenderer ();\r\n\t...  \r\n}\r\n```\r\n\r\nCreate an instance of SfScheduleRenderer in the FinishedLaunching overridden method of the AppDelegate class in the iOS Project as shown below\r\n\r\n```csharp\r\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\r\n{\r\n\t...\r\n\tnew SfScheduleRenderer ();\r\n\t...\r\n}\r\n```\r\n\r\n**Initializing Schedule**\r\n\r\nThe SfSchedule control is configured entirely in C# code.\r\n\r\nCreate an instance of SfSchedule.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n   SfSchedule sfschedule = new SfSchedule ();\r\n   this.Content = sfschedule;\r\n\r\n```\r\n\r\nYou can change the default UI of schedule using ScheduleView to display the dates in different layouts available in the control.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n  SfSchedule sfschedule=new SfSchedule ();\r\n  sfschedule.ScheduleView = ScheduleView.MonthView;\r\n  this.Content= sfschedule;\r\n\r\n```\r\n\t\r\n**Populating Events**\r\n\r\nYou can add events to the schedule by creating collection of ScheduleAppointments using ScheduleAppointmentColletion.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n\tScheduleAppointmentCollection appointmentCollection;\r\n\r\n\tappointmentCollection = new ScheduleAppointmentCollection();\r\n\r\n\t//Creating new event\r\n\tScheduleAppointment clientMeeting = new ScheduleAppointment();\r\n\r\n\tDateTime currentDate = DateTime.Now;\r\n\tDateTime startTime = new DateTime (currentDate.Year, currentDate.Month, currentDate.Day, 10, 0, 0);\r\n\tDateTime endTime = new DateTime (currentDate.Year, currentDate.Month, currentDate.Day, 12, 0, 0);\r\n\r\n\tclientMeeting.StartTime = startTime;\r\n\tclientMeeting.EndTime = endTime;\r\n\tclientMeeting.Color = Color.Blue;\r\n\tclientMeeting.Subject = “ClientMeeting”;\r\n\r\n\tappointmentCollection.Add(clientMeeting);\r\n    sfschedule.DataSource = appointmentCollection;\r\n    this.Content= sfschedule;\r\n\r\n```\r\n\r\n**Populating Recursive Events**\r\n\r\nYou can also add recursive appointments to Schedule, by using Rrule generator in schedule.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n\tScheduleAppointmentCollection appointmentCollection = new ScheduleAppointmentCollection();\r\n\t//Creating new events\r\n\tScheduleAppointment clientMeeting = new ScheduleAppointment();\r\n\tDateTime currentDate = DateTime.Now;\r\n\r\n\tDateTime startTime = new DateTime (currentDate.Year, currentDate.Month, currentDate.Day, 10, 0, 0);\r\n\r\n\tDateTime endTime = new DateTime (currentDate.Year, currentDate.Month, currentDate.Day, 12, 0, 0);\r\n    clientMeeting.StartTime = startTime;\r\n    clientMeeting.EndTime = endTime;\r\n    clientMeeting.Color = Color.Blue;\r\n    clientMeeting.Subject = “ClientMeeting”;\r\n    clientMeeting.IsRecursive = true;\r\n\r\n    RecurrenceProperties recurrenceProperties = new RecurrenceProperties();\r\n    recurrencePropertiesForAlternativeDay.RecurrenceType = RecurrenceType.Daily;\r\n    recurrenceProperties.IsDailyEveryNDays = true;\r\n    recurrenceProperties.DailyNDays = 2;\r\n    recurrenceProperties.IsRangeRecurrenceCount = true;\r\n    recurrenceProperties.IsRangeNoEndDate = false;\r\n    recurrenceProperties.IsRangeEndDate = false;\r\n    recurrenceProperties.RangeRecurrenceCount = 10; \r\n    recurrenceProperties.RecurrenceRule = DependencyService.Get\u003cIRecurrenceBuilder\u003e().RRuleGenerator(recurrenceProperties, clientMeeting.StartTime, clientMeeting.EndTime);\r\n    clientMeeting.RecurrenceRule = recurrenceProperties.RecurrenceRule;\r\n\tappointmentCollection.Add(clientMeeting);\r\n\tsfschedule.DataSource = appointmentCollection;\r\n\tthis.Content= sfschedule;\r\n\r\n```\r\n\r\n**Enabling Appointment Inline**\r\n\r\nWhen the schedule appointments are viewed in Monthview, it will not display much information about the appointments, you can view the appointments in inline by setting ShowAppointmentsInline property of MonthViewSettings as True.\r\n\r\n**[C#]**\r\n\r\n```csharp\r\n\r\n\tsfschedule.ScheduleView = ScheduleView.MonthView;\r\n\tsfschedule.ShowAppointmentsInline = true;\r\n\tthis.Content= sfschedule;\r\n\r\n```\r\n\r\n\r\n\r\n","Hash":"6f26151b25de088c65f076b2ae711da8","TargetPlatforms":["ios","android"],"TrialHash":"081f75b72b6b3a0d6314f3294bbc2235"}